<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Exception on VW Blog</title>
    <link>https://vcvvvc.github.io/tags/exception/</link>
    <description>Recent content in Exception on VW Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 13 Sep 2020 15:13:08 +0800</lastBuildDate>
    <atom:link href="https://vcvvvc.github.io/tags/exception/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cpp exception class</title>
      <link>https://vcvvvc.github.io/post/cpp_exception/</link>
      <pubDate>Sun, 13 Sep 2020 15:13:08 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/cpp_exception/</guid>
      <description>&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class exception{&#xA;public:&#xA;    exception () throw();  //构造函数&#xA;    exception (const exception&amp;amp;) throw();  //拷贝构造函数&#xA;    exception&amp;amp; operator= (const exception&amp;amp;) throw();  //运算符重载&#xA;    virtual ~exception() throw();  //虚析构函数&#xA;    virtual const char* what() const throw();  //虚函数&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;what() 函数返回一个能识别异常的字符串，正如它的名字“what”一样，可以粗略地告诉你这是什么异常。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;exception-类的继承层次&#34;&gt;exception 类的继承层次:&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/cpp_exception/exception1.jpg&#34; alt=&#34;exception&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;exception-类&#34;&gt;exception 类&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;直接派生类&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;exceptopn&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;explain&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;login_error&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;logic error&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;runtime_error&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;运行时错误&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;bad_alloc&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;使用 new 或 new[] 分配内存失败时抛出的异常&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;bad_typeid&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;使用 typeid 操作一个 NULL 指针，而且该指针是带有虚函数的类，这时抛出 bad_typeid 异常&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;bad_cast&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;使用 dynamic_cast 转换失败时抛出的异常&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;ios_base::failure&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;io 过程中出现的异常&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;bad_exception&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;这是个特殊的异常，如果函数的异常列表里声明了 bad_exception 异常，当函数内部抛出了异常列表中没有的异常时，如果调用的 unexpected() 函数中抛出了异常，不论什么类型，都会被替换为 bad_exception 类型&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;logic_error 的派生类&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
