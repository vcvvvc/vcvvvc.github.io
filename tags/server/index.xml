<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Server on VW Blog</title>
    <link>./tags/server/</link>
    <description>Recent content in Server on VW Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 15 Dec 2022 14:07:46 +0800</lastBuildDate>
    <atom:link href="./tags/server/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43;标准网络库/对比</title>
      <link>./post/c&#43;&#43;%E6%A0%87%E5%87%86%E7%BD%91%E7%BB%9C%E5%BA%93/</link>
      <pubDate>Thu, 15 Dec 2022 14:07:46 +0800</pubDate>
      <guid>./post/c&#43;&#43;%E6%A0%87%E5%87%86%E7%BD%91%E7%BB%9C%E5%BA%93/</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/357075167&#34;&gt;https://zhuanlan.zhihu.com/p/357075167&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;各编程语言http请求对比&#34;&gt;各编程语言HTTP请求对比&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;c: libcurl&lt;/li&gt;&#xA;&lt;li&gt;c#: RestSharp&lt;/li&gt;&#xA;&lt;li&gt;go: net/http&lt;/li&gt;&#xA;&lt;li&gt;java: OKHttp&lt;/li&gt;&#xA;&lt;li&gt;php: HttpRequest&lt;/li&gt;&#xA;&lt;li&gt;python: requests&lt;/li&gt;&#xA;&lt;li&gt;ruby: net/http&lt;/li&gt;&#xA;&lt;li&gt;nodejs: http&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;cc网络库对比&#34;&gt;c/c++网络库对比&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;libevent&lt;/li&gt;&#xA;&lt;li&gt;libev&lt;/li&gt;&#xA;&lt;li&gt;libuv&lt;/li&gt;&#xA;&lt;li&gt;libhv&lt;/li&gt;&#xA;&lt;li&gt;asio&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Http_cookie</title>
      <link>./post/http_cookie/</link>
      <pubDate>Thu, 28 Jul 2022 22:51:53 +0800</pubDate>
      <guid>./post/http_cookie/</guid>
      <description>&lt;h2 id=&#34;cookie&#34;&gt;Cookie&lt;/h2&gt;&#xA;&lt;p&gt;&lt;em&gt;HTTP 是无状态协议，它不对之前发生过的请求和响应的状态进行管理。&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;HTTP Cookie（也叫 Web Cookie 或浏览器 Cookie）&lt;/strong&gt; 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie 使基于无状态的 HTTP 协议记录稳定的状态信息成为了可能。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Cookie 主要用于以下三个方面：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;个性化设置（如用户自定义设置、主题等）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;浏览器行为跟踪（如跟踪分析用户行为等）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;创建-cookie&#34;&gt;创建 Cookie&lt;/h2&gt;&#xA;&lt;p&gt;当服务器收到 HTTP 请求时，服务器可以在响应头里面添加一个 Set-Cookie 选项。浏览器收到响应后通常会保存下 Cookie，之后对该服务器每一次请求中都通过 Cookie 请求头部将 Cookie 信息发送给服务器。另外，Cookie 的过期时间、域、路径、有效期、适用站点都可以根据需要来指定。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;定义-cookie-的生命周期&#34;&gt;定义 Cookie 的生命周期&lt;/h2&gt;&#xA;&lt;p&gt;Cookie 的生命周期可以通过两种方式定义：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;会话期: Cookie 是最简单的 Cookie：浏览器关闭之后它会被自动删除，也就是说它仅在会话期内有效。会话期 Cookie 不需要指定过期时间（Expires）或者有效期（Max-Age）。需要注意的是，有些浏览器提供了会话恢复功能，这种情况下即使关闭了浏览器，会话期 Cookie 也会被保留下来，就好像浏览器从来没有关闭一样，这会导致 Cookie 的生命周期无限期延长。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;持久性: Cookie 的生命周期取决于过期时间（Expires）或有效期（Max-Age）指定的一段时间。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;cookie-的作用域&#34;&gt;Cookie 的作用域&lt;/h2&gt;&#xA;&lt;p&gt;Domain 和 Path 标识定义了 Cookie 的作用域：即允许 Cookie 应该发送给哪些 URL。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;re&#34;&gt;Re:&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/web/http/cookies&#34;&gt;https://developer.mozilla.org/zh-CN/docs/web/http/cookies&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>TCP/UDP首部</title>
      <link>./post/tcp_udp%E9%A6%96%E9%83%A8/</link>
      <pubDate>Wed, 23 Feb 2022 17:47:16 +0800</pubDate>
      <guid>./post/tcp_udp%E9%A6%96%E9%83%A8/</guid>
      <description>&lt;h2 id=&#34;tcp&#34;&gt;TCP&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/tcp_ip/tcp_%E9%A6%96%E9%83%A81.png&#34; alt=&#34;tcp_1&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/tcp_ip/tcp_%E9%A6%96%E9%83%A8.png&#34; alt=&#34;tcp_&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;tcp报文首部的前20个字节是固定的，后面有4n字节是需要根据需要增加的选项，因此tcp首部的最小长度是20字节。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;源端口、目标端口：&#xA;计算机上的进程要和其他进程通信是要通过计算机端口的，而一个计算机端口某个时刻只能被一个进程占用，所以通过指定源端口和目标端口，就可以知道是哪两个进程需要通信。源端口、目标端口是用16位表示的，可推算计算机的端口个数为2^16个。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;序号：表示本报文段所发送数据的第一个字节的编号。在TCP连接中所传送的字节流的每一个字节都会按顺序编号。由于序列号由32位表示，所以每2^32个字节，就会出现序列号回绕，再次从 0 开始。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;序号增加到最大值的时候，下一个序号又回到了 0.&#xA;也就是说 TCP 协议可对 4GB 的数据进行编号，在一般情况下可保证当序号重复使用时，旧序号的数据早已经通过网络到达终点或者丢失了。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;确认号：表示接收方期望收到发送方下一个报文段的第一个字节数据的编号。也就是告诉发送发：我希望你（指发送方）下次发送的数据的第一个字节数据的编号是这个确认号。也就是告诉发送方：我希望你（指发送方）下次发送给我的TCP报文段的序列号字段的值是这个确认号。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;数据偏移: 占4位，它指出TCP报文段的数据起始处距离TCP报文段的起始处有多远。这个字段实际上是指出TCP报文段的首部长度。由于首部中还有长度不确定的选项字段，因此数据偏移字段是必要的。&#xA;但应注意，“数据偏移”的单位是32位字（即以4字节的字为计算单位）。由于4位二进制数能表示的最大十进制数字是15，因此数据偏移的最大值是60字节，这也是TCP首部的最大字节（即选项长度不能超过40字节）。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;保留: 占 0.5 个字节 (4 位)。  保留为今后使用，但目前应置为 0。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;控制位: 占 1 个字节 （8位）&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CWR（Congestion Window Reduced）&lt;/li&gt;&#xA;&lt;li&gt;ECE（ECN-Echo）&lt;/li&gt;&#xA;&lt;li&gt;URG（Urgent Flag）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;该位为1时，表示包中有需要紧急处理的数据。对于需要紧急处理 的数据，会在后面的紧急指针中再进行解释。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;ACK（Acknowledgement Flag）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;该位为1时，确认应答的字段变为有效。TCP规定除了最初建立连 接时的SYN包之外该位必须设置为1。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;PSH（Push Flag）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;该位为1时，表示需要将受到的数据立刻传给上层应用协议。PSH 为0时，则不需要立即传而是先进行缓存。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;RST（Reset Flag）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;该位为1时表示TCP连接中出现异常必须强制断开连接。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;SYN（Synchronize Flag）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用于建立连接。SYN为1表示希望建立连接，并在其序列号的字段 进行序列号初始值的设定&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;FIN（Fin Flag）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;该位为1时，表示今后不会再有数据发送，希望断开连接。当通信 结束希望断开连接时，通信双方的主机之间就可以相互交换FIN位置为1 的TCP段。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;窗口大小（Window Size）&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;该字段长为16位。用于通知从相同TCP首部的确认应答号所指位置 开始能够接收的数据大小（8位字节）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;校验和（Checksum）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;紧急指针（Urgent Pointer）&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;该字段长为16位。只有在URG控制位为1时有效。该字段的数值表 示本报文段中紧急数据的指针。正确来讲，从数据部分的首位到紧急指 针所指示的位置为止为紧急数据。因此也可以说紧急指针指出了紧急数 据的末尾在报文段中的位置。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;选项（Options）&lt;/p&gt;</description>
    </item>
    <item>
      <title>IPv4/v6首部</title>
      <link>./post/ip%E9%A6%96%E9%83%A8/</link>
      <pubDate>Tue, 15 Feb 2022 20:36:44 +0800</pubDate>
      <guid>./post/ip%E9%A6%96%E9%83%A8/</guid>
      <description>&lt;h2 id=&#34;ipv4首部&#34;&gt;IPv4首部&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/tcp_ip/ipv4-%E9%A6%96%E9%83%A8.png&#34; alt=&#34;ipv4&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/tcp_ip/ipv4-%E9%A6%96%E9%83%A82.png&#34; alt=&#34;ipv4-2&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;版本：由4比特构成，表示标识IP首部的版本号。IPv4的版本号即为4，因此在这个字段上的值也为“4”。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;首部长度(（IHL：Internet Header Length）)：由4比特构成，表明IP首部的大小，单位为4字节（32比特）。对于没有可选项的IP包，首部长度则设置为“5”。也就是说，当没有可选项时，IP首部的长度为20字节（4*5=20）。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;区别服务（TOS：Type Of Service）: 由8比特构成，用来表明服务质量。每一个的具体含义如表所示。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/tcp_ip/tos.png&#34; alt=&#34;tos&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;DSCP（Differential Services Codepoint，差分服务代码点）是TOS（Type Of Services）的一部分。现在统称为DiffSer，用来进行质量控制。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/tcp_ip/dscp-ecn.png&#34; alt=&#34;dscp-ecn&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;如果3-5位的值为0,0~2位则被称作类别选择代码点。这样就可以向TOS的优先度那样提供8中类型的质量控级别。对于每一种级别所采取的措施则由提供DiffServ的运营管理者制定。为了与TOS保持一致，值越大优先度也越高。如果第五位为1，表示实验或本地使用的意思。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ECN(Ecplicit Congestion Notification，显示拥塞通告)用来报告网络拥塞情况，由两个比特构成。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/tcp_ip/ecn.png&#34; alt=&#34;ecn&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;第6位的ECT 用以通告上传TCP层协议是否处理ECN。当路由器在转发ECN为1的包的过程中，如果出现网络拥塞的情况，就将CE位设置为1。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;总长度（Total Length）： 表示IP首部与数据部分合起来的字节数。该字段长16比特。因此IP包的最大长度为65535=2^16字节。目前还不存在能够传输最大长度为65535字节的IP包的数据链路。不过，由于有IP分片处理，从IP的上一层的角度看，不论底层采用何种数据链路，都可以认为能够以IP的最大包长传输数据。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;标识（ID：Identification）：由16比特构成，用于分片重组。同一个分片的标识值相同，不同分片的标识值不同。通常，每发送一个IP包，它的值也逐渐递增。此外，即使IP相同，如果目标地址、源地址或协议不同的话，也会被认为是不同的分片。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;标志：由3比特构成，标识包被分片的相关信息。每一个的具体含义如图：&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/tcp_ip/biaozhi.png&#34; alt=&#34;biaozhi&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;片位移（FO：Fragment Offset）：由13比特构成，用来标识被分片的每一个分段相当于原始数据的位置。第一个分片对应的值为0.由于FO域占13位，因此最多可以表示8192（=2^13）个相对位置。单位为8字节，因此最大可表示原始数据8*8192=65536字节的位置。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;生存时间（TTL：Time To Live）：由8比特构成，它最初的意思是以秒为单位记录当前包在网络上应该生存的期限。然而，在实际中它是指可以中转多少个路由器的意思。每经过一个路由器，TTL会减1，直到变成0则丢弃该包。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;协议（Protocol）：由8比特构成，表示IP首部的下一个首部隶属于哪个协议。目前使用的协议部分如图：&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/tcp_ip/Protocol.png&#34; alt=&#34;protocol&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;首部校验和（Header Checksum）：由16比特（2个字节）构成，也叫IP首部校验和。该字段只校验数据报的首部，不校验数据部分。它主要用来确保IP数据报不被破坏。校验和的计算过程，首先要将校验和的所有位置设置为0，然后以16比特为单位划分IP首部，并用1补数计算所有16位字的和。最后将所得到这个和的1补数赋给首部校验和字段。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;源地址（Source Address）：由32比特构成，表示发送端IP地址。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;目标地址（Destination Address）：由32比特构成，表示接收端IP地址。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;可选项（Options）：长度可变，通常只在进行实验或诊断时使用。该字段包含如下几点信息：安全级别，源路径，路径记录，时间戳&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;填充（Padding）：也称作填充物。在有可选项的情况下，首部长度可能不是32比特的整数倍。为此，通过向字段填充0，调整为32比特的整数倍。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;数据：存入数据。将IP上层协议的首部也作为数据进行处理。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;ipv6首部&#34;&gt;IPv6首部&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;IPv6为了减轻路由器的负担，省略了首部校验和字段。因此路由器不再需要计算校验和，从而提高了包的转发效率。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;此外，分片处理所用的识别码成为可选项。为了让64位CPU的计算机处理起来更方便，IPv6的首部及可选项都由8字节构成。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/tcp_ip/ipv6.png&#34; alt=&#34;ipv6&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;版本：和IPv4 一样，由4比特构成。IPv6其版本号为6，因此在这个字段上的值为“6”。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;通信量类（Traffic Class）：相当于IPv4的TOS（Type Of Service）字段，也由8比特构成。有TOS在IPv4中几乎没有什么建树，未能成为卓有成效的技术，本来计划在IPv6中删掉这个字段，不过出于今后研究的考虑还是保留了该字段。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;流标号（Flow Label）：由20比特构成，准备用于服务质量（Qos：Quality Of Service）控制。使用这个字段提供怎样的服务已经成为未来研究的课题。不适用Qos时每一位可以全部设置为0。   在进行服务质量控制的时，将流标号设置为一个随机数，然后利用一种可以设置流的协议RSVP（Resource Reservation Protocol ）在路由器上进行Qos设置。当某个包在发送途中需要Qos时，需要附上RSVP预想的流标号。路由器接收到这样的IP包后现先将流标号作为查找关键字，迅速从服务质量控制信息中查找并做相应处理。此外，只有流标号、源地址以及目标地址三项完全一致时，才被认为是一个流。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;有效荷载长度（Payload Length）：有效荷载长度是指包的数据部分。IPv4的TL(Total Length)是指包含首部在内的所有长度。然而IPv6中的这个Playload Length不包括首部，只表示数据部分的长度。由于IPv6的可选项是指连接IPv6首部的数据，只有当有可选项时，此处包含可选项数据的所有长度就是Playload Length。&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43;获取域名IP</title>
      <link>./post/get_domain_ip_cpp/</link>
      <pubDate>Fri, 14 Jan 2022 00:09:51 +0800</pubDate>
      <guid>./post/get_domain_ip_cpp/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#https:&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//blog.csdn.net/dosthing/article/details/80383817&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string ip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;www.baidu.com&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hostent&lt;/span&gt; stHostent;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hostent&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pstHostent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;pptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sprintf(buf,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ip&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; iError;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;((pstHostent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gethostbyname(buf)) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; pstHostent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;h_addr_list &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; pstHostent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;h_addr_list[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;can&amp;#39;t parse the domain&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;official hostname: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; pstHostent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;h_name &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(pptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pstHostent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;h_aliases; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pptr &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL; pptr&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alias: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pptr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt;(pstHostent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;h_addrtype)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; AF_INET:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; AF_INET6:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pstHostent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;h_addr_list;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pptr&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;NULL; pptr&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;address:%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,inet_ntop(pstHostent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;h_addrtype, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pptr, buf,&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;first address: %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,inet_ntop(pstHostent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;h_addrtype, pstHostent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;h_addr,buf,&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unkown address type&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>ip转换函数</title>
      <link>./post/ip%E8%BD%AC%E6%8D%A2%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sun, 21 Nov 2021 22:08:01 +0800</pubDate>
      <guid>./post/ip%E8%BD%AC%E6%8D%A2%E5%87%BD%E6%95%B0/</guid>
      <description>&lt;p&gt;&lt;strong&gt;主机字节序（大端） 和 网络字节序（小端)&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;大端: 0x12 | 0x32 | 0x56&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;小端: 0x56 | 0x34 | 0x12&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;code&gt;Host to Network long/short&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;Network to Host long/short&lt;/code&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;uint32_t htonl(uint32_t hostlong); //将主机的无符号长整型数转换成网络字节序&#xA;uint16_t htons(uint16_t hostshort); //将主机的无符号短整形数转换成网络字节序&#xA;uint32_t ntohl(uint32_t netlong); //将一个无符号长整型数从网络字节序转换为主机字节序&#xA;uint16_t ntohs(uint16_t netshort); //将一个无符号短整形数从网络字节序转换为主机字节序&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/vcvvvc/CPP_Test/tree/master/test/hostto&#34;&gt;https://github.com/vcvvvc/CPP_Test/tree/master/test/hostto&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#把ip地址转化为用于网络传输的二进制数值(32位)&#xA;in_addr_t inet_addr(const char *cp); #少用了&#xA;int inet_aton(const char * cp, struct in_addr *inp); &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#将网络传输的二进制数值转化为成点分十进制的ip地址&#xA;char* inet_ntoa(struct in_addr in);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#这两个函数是随IPv6出现的函数，对于IPv4地址和IPv6地址都适用，函数中p和n分别代表表达（presentation)和数值（numeric)。&#xA;地址的表达格式通常是ASCII字符串，数值格式则是存放到套接字地址结构的二进制值。&#xA;int inet_pton(int family, const char *strptr, void *addrptr);&#xA;const char * inet_ntop(int family, const void *addrptr, char *strptr, size_t len);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;./img/inet_to/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>I/O多路复用</title>
      <link>./post/io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</link>
      <pubDate>Sun, 10 Oct 2021 10:00:00 +0800</pubDate>
      <guid>./post/io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</guid>
      <description>&lt;h2 id=&#34;io模型&#34;&gt;I/O模型&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;%5B%5Dhttps://vcvvvc.github.io/post/server_actor/&#34;&gt;https://vcvvvc.github.io/post/server_actor/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;io多路复用&#34;&gt;I/O多路复用&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Select、Poll、Epoll, 多路是指？多个业务方（句柄）并发下来的 IO 。 复用是指？复用这一个后台处理程序。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;select&#34;&gt;Select&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;select()函数主要解决的是accept()函数阻塞问题，而没有解决recv()和send()函数阻塞问题&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;sys/select.h&amp;gt;&#xA;int select(int nfds, fd_set *readset, fd_set *writeset, fd_set *exceptset,struct timeval *timeout);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;nfds参数指定被监听的文件描述符的总数。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;readfds, writefds和exceptfds参数分别指向可读、可写和异常等事件对应的文件描述符集合。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;sys/select.h&amp;gt;&#xA;int FD_ZERO(int fd, fd_set *fdset);   //一个 fd_set类型变量的所有位都设为 0&#xA;int FD_CLR(int fd, fd_set *fdset);  //清除某个位时可以使用&#xA;int FD_SET(int fd, fd_set *fd_set);   //设置变量的某个位置位&#xA;int FD_ISSET(int fd, fd_set *fdset); //测试某个位是否被置位&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;timeout参数用来设置select函数的超时时间&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;struct timeval{&#xA;        long tv_sec;   /*秒 */&#xA;        long tv_usec;  /*微秒 */&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;select示例代码-selectcpp&#34;&gt;select示例代码: &lt;a href=&#34;https://github.com/vcvvvc/CPP_Test/blob/master/server/socket/select&#34;&gt;select.cpp&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;poll&#34;&gt;Poll&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;poll.h&amp;gt;&#xA;int poll(struct pollfd *ufds, unsigned int nfds, int timeout);&#xA;&#xA;struct pollfd {&#xA; int fd;&#x9;&#x9;//文件描述符&#xA; short events;&#x9;//要求查询的事件掩码&#xA; short revents;&#x9;//返回的事件掩码&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;ufds是一个数组，即poll函数可以监视多个文件描述符。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Server sum</title>
      <link>./post/server_sum/</link>
      <pubDate>Sun, 04 Apr 2021 18:21:09 +0800</pubDate>
      <guid>./post/server_sum/</guid>
      <description>&lt;h2 id=&#34;c标准网络库对比&#34;&gt;c++标准网络库对比&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../../post/c++%E6%A0%87%E5%87%86%E7%BD%91%E7%BB%9C%E5%BA%93/&#34;&gt;https://vcvvvc.github.io/post/c++标准网络库/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;socket-struct整理&#34;&gt;socket struct整理&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../../post/socket_struct/&#34;&gt;https://vcvvvc.github.io/post/socket_struct/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;socket编程需要的头文件整理&#34;&gt;socket编程需要的头文件整理&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../../post/socket_file/&#34;&gt;https://vcvvvc.github.io/post/socket_file/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;socket-function&#34;&gt;socket function&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../../post/socket/&#34;&gt;https://vcvvvc.github.io/post/socket/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;io复用&#34;&gt;I/O复用&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../../post//io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/&#34;&gt;https://vcvvvc.github.io/post//io多路复用&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;sem-function&#34;&gt;sem function&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../../post/sem/&#34;&gt;https://vcvvvc.github.io/post/sem/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;server-io-actor&#34;&gt;server io actor&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../../post/server_actor/&#34;&gt;https://vcvvvc.github.io/post/server_actor/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;timer-function&#34;&gt;timer function&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../../post/timer_function/&#34;&gt;https://vcvvvc.github.io/post/timer_function/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;linux-pthread-线程创建与使用&#34;&gt;Linux Pthread 线程创建与使用&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;../../post/pthread/&#34;&gt;https://vcvvvc.github.io/post/pthread/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;c11-thread&#34;&gt;C++11 thread&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;../../post/cppthread/&#34;&gt;https://vcvvvc.github.io/post/cppthread/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;unp-note&#34;&gt;Unp note&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;../../post/unp_note/&#34;&gt;https://vcvvvc.github.io/post/unp_note/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;tcp_ip--计算机网络&#34;&gt;TCP_IP | 计算机网络&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;../../post/computer_network/&#34;&gt;https://vcvvvc.github.io/post/computer_network/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;exception-class-异常类&#34;&gt;exception class 异常类&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;../../post/cpp_exception/&#34;&gt;https://vcvvvc.github.io/post/cpp_exception/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tcp_ip</title>
      <link>./post/tcp_ip/</link>
      <pubDate>Thu, 25 Feb 2021 14:28:11 +0800</pubDate>
      <guid>./post/tcp_ip/</guid>
      <description>&lt;h1 id=&#34;计算机体系结构&#34;&gt;计算机体系结构&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/tcp_ip/q2.png&#34; alt=&#34;q2&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;各层作用及协议&#34;&gt;各层作用及协议&lt;/h1&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;分层&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;作用&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;协议&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;物理层&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;通过媒介传输比特，确定机械及电气规范（比特 Bit）&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;RJ45、CLOCK、IEEE802.3（中继器，集线器）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;数据链路层&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;将比特组装成帧和点到点的传递（帧 Frame）&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;PPP、FR、HDLC、VLAN、MAC（网桥，交换机）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;网络层&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;负责数据包从源到宿的传递和网际互连（包 Packet）&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;IP、ICMP、ARP、RARP、OSPF、IPX、RIP、IGRP（路由器）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;运输层&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;提供端到端的可靠报文传递和错误恢复（ 段Segment）&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;TCP、UDP、SPX&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;会话层&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;建立、管理和终止会话（会话协议数据单元 SPDU）&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;NFS、SQL、NETBIOS、RPC&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;表示层&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;对数据进行翻译、加密和压缩（表示协议数据单元 PPDU）&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;JPEG、MPEG、ASII&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;应用层&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;允许访问OSI环境的手段（应用协议数据单元 APDU）&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;FTP、DNS、Telnet、SMTP、HTTP、WWW、NFS&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;封装&#34;&gt;封装&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/tcp_ip/q1.png&#34; alt=&#34;q1&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;链路层&#34;&gt;链路层&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;链路层主要有三个目的：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;为IP模块发送和接收IP数据报；&lt;/li&gt;&#xA;&lt;li&gt;为ARP模块发送ARP请求和接收ARP应答；&lt;/li&gt;&#xA;&lt;li&gt;为RARP发送RARP请求和接收RARP应答。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;PPP（点到点协议）是为在同等单元之间传输数据包这样的简单链路设计的链路层协议。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;环回接口&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/tcp_ip/q3.png&#34; alt=&#34;q3&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;re: &lt;a href=&#34;https://developer.aliyun.com/article/222535&#34;&gt;mtu&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;网络层&#34;&gt;网络层&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;IP（Internet Protocol，网际协议）是为计算机网络相互连接进行通信而设计的协议。&lt;/li&gt;&#xA;&lt;li&gt;ARP（Address Resolution Protocol，地址解析协议）&lt;/li&gt;&#xA;&lt;li&gt;ICMP（Internet Control Message Protocol，网际控制报文协议）&lt;/li&gt;&#xA;&lt;li&gt;IGMP（Internet Group Management Protocol，网际组管理协议）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;IP是TCP/IP协议族中最为核心的协议。所有的TCP、UDP、ICMP及IGMP数据都以IP数据报格式传输&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;不可靠（unreliable）的意思是它不能保证IP数据报能成功地到达目的地。IP仅提供最好的传输服务。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;无连接（connectionless）这个术语的意思是IP并不维护任何关于后续数据报的状态信息。每个数据报的处理是相互独立的。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/tcp_ip/q4.png&#34; alt=&#34;q4&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/tcp_ip/q5.png&#34; alt=&#34;q5&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;IP 地址分类:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;IP 地址 ::= {&amp;lt;网络号&amp;gt;,&amp;lt;主机号&amp;gt;}&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;IP地址类别&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;网络号&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;网络范围&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: right&#34;&gt;主机号&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: right&#34;&gt;IP地址范围&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;A 类&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;8bit，第一位固定为0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;0——127&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;24bit&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1.0.0.0——127.255.255.255&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;B 类&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;16bit，前两位固定为10&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;128.0——191.255&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;16bit&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;128.0.0.0——191.255.255.255&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;C 类&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;24bit，前三位固定为110&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;192.0.0——223.255.255&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;8bit&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;192.0.0.0——223.255.255.255&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;D 类&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;前四位固定为1110，后面为多播地址&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;E 类&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;前五位固定为11110，后面保留为今后所用&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;arp-地址解析协议&#34;&gt;ARP 地址解析协议&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;ARP为IP地址到对应的硬件地址之间提供动态映射。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Timer function</title>
      <link>./post/timer_function/</link>
      <pubDate>Sun, 07 Feb 2021 21:45:11 +0800</pubDate>
      <guid>./post/timer_function/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;非活跃，是指客户端（这里是浏览器）与服务器端建立连接后，长时间不交换数据，一直占用服务器端的文件描述符，导致连接资源的浪费。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;定时事件，是指固定一段时间之后触发某段代码，由该段代码处理一个事件，如从内核事件表删除事件，并关闭文件描述符，释放连接资源。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;定时器，是指利用结构体或其他形式，将多种定时事件进行封装起来。具体的，这里只涉及一种定时事件，即定期检测非活跃连接，这里将该定时事件与连接资源封装为一个结构体定时器。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;定时器容器，是指使用某种容器类数据结构，将上述多个定时器组合起来，便于对定时事件统一管理。具体的，项目中使用升序链表将所有定时器串联组织起来。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Linux下提供了三种定时的方法:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;socket选项SO_RECVTIMEO和SO_SNDTIMEO&lt;/li&gt;&#xA;&lt;li&gt;SIGALRM信号&lt;/li&gt;&#xA;&lt;li&gt;I/O复用系统调用的超时参数&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;socket选项&#34;&gt;Socket选项&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/timer/socket_timer.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;struct timeval timeout;&#xA;timeout.tv_sec = time;&#xA;timeout.tv_usec = 0;&#xA;&#xA;socklen_t time_len = sizeof(timeout);&#xA;ret = setsockopt(sockfd, SOL_SOCKET, SO_SNDTIMEO, &amp;amp;timeout, time_len); //发送数据超时&#xA;用返回值errno判断是否达到指定时间 (errno == SO_SNDTIMEO)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h1 id=&#34;sigalrm信号&#34;&gt;SIGALRM信号&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;sigaction结构体&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;struct sigaction {&#xA;    void (*sa_handler)(int);&#xA;    void (*sa_sigaction)(int, siginfo_t *, void *);&#xA;    sigset_t sa_mask;&#xA;    int sa_flags;&#xA;    void (*sa_restorer)(void);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;sa_handler是一个函数指针，指向信号处理函数&#xA;sa_sigaction同样是信号处理函数，有三个参数，可以获得关于信号更详细的信息&#xA;sa_mask用来指定在信号处理函数执行期间需要被屏蔽的信号&#xA;sa_flags用于指定信号处理的行为&#xA;SA_RESTART，使被信号打断的系统调用自动重新发起&#xA;SA_NOCLDSTOP，使父进程在它的子进程暂停或继续运行时不会收到 SIGCHLD 信号&#xA;SA_NOCLDWAIT，使父进程在它的子进程退出时不会收到 SIGCHLD 信号，这时子进程如果退出也不会成为僵尸进程&#xA;SA_NODEFER，使对信号的屏蔽无效，即在信号处理函数执行期间仍能发出这个信号&#xA;SA_RESETHAND，信号处理之后重新设置为默认的处理方式&#xA;SA_SIGINFO，使用 sa_sigaction 成员而不是 sa_handler 作为信号处理函数&#xA;sa_restorer一般不使用&lt;/p&gt;</description>
    </item>
    <item>
      <title>Server actor</title>
      <link>./post/server_actor/</link>
      <pubDate>Sun, 31 Jan 2021 22:19:30 +0800</pubDate>
      <guid>./post/server_actor/</guid>
      <description>&lt;p&gt;&lt;strong&gt;同步IO模型通常用于实现Reactor模式, 异步IO模型则用于实现Proactor模式。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;reactor&#34;&gt;Reactor&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;Reactor模式要求主线程（I/O处理单元，下同）只负责监听文件描述上是否有事件发生，有的话就立即将该事件通知工作线程（逻辑单元，下同）。除此之外，主线程不做任何其他实质性的工作。读写数据，接受新的连接，以及处理客户请求均在工作线程中完成。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Reactor工作流程∶&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主线程往 epoll内核事件表中注册 socket 上的读就绪事件。&lt;/li&gt;&#xA;&lt;li&gt;主线程调用epoll_wait 等待socket上有数据可读。&lt;/li&gt;&#xA;&lt;li&gt;当socket上有数据可读时，epoll_wait 通知主线程。主线程则将socket可读事件放入请求队列。&lt;/li&gt;&#xA;&lt;li&gt;睡眠在请求队列上的某个工作线程被唤醒，它从socket读取数据，并处理客户请求，然后往 epoll 内核事件表中注册该 socket 上的写就绪事件。&lt;/li&gt;&#xA;&lt;li&gt;主线程调用epoll_wait 等待socket可写。&lt;/li&gt;&#xA;&lt;li&gt;当socket可写时，epoll_wait 通知主线程。主线程将socket可写事件放入请求队列。&lt;/li&gt;&#xA;&lt;li&gt;睡眠在请求队列上的某个工作线程被唤醒，它往socket上写入服务器处理客户请求的结果。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/io_actor/reactor.png&#34; alt=&#34;reactor&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;procactor&#34;&gt;Procactor&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;将多有I/O操作都交给主线程和内核来处理, 工作线程仅负责业务逻辑&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Proactor工作流程∶&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主线程调用aio_read 函数向内核注册 socket 上的读完成事件，并告诉内核用户读缓冲区的位置，以及读操作完成时如何通知应用程序（这里以信号为例，详情请参考sigevent的 man 手册）。&lt;/li&gt;&#xA;&lt;li&gt;主线程继续处理其他逻辑。&lt;/li&gt;&#xA;&lt;li&gt;当socket上的数据被读入用户缓冲区后，内核将向应用程序发送一个信号，以通知应用程序数据已经可用。&lt;/li&gt;&#xA;&lt;li&gt;应用程序预先定义好的信号处理函数选择一个工作线程来处理客户请求。工作线程处理完客户请求之后，调用 aio_write 函数向内核注册 socket 上的写完成事件，并告诉内核用户写缓冲区的位置，以及写操作完成时如何通知应用程序（仍然以信号为例）。&lt;/li&gt;&#xA;&lt;li&gt;主线程继续处理其他逻辑。&lt;/li&gt;&#xA;&lt;li&gt;当用户缓冲区的数据被写人 socket 之后，内核将向应用程序发送一个信号，以通知应用程序数据已经发送完毕。&lt;/li&gt;&#xA;&lt;li&gt;应用程序预先定义好的信号处理函数选择一个工作线程来做善后处理，比如决定是否关闭 socket。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/io_actor/proactor.png&#34; alt=&#34;proactor&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;模拟proactor&#34;&gt;模拟Proactor&lt;/h1&gt;&#xA;&lt;p&gt;使用同步I/O模型（仍然以epoll_wait为例）模拟出的Proactor模式的工作流程∶&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主线程往 epoll 内核事件表中注册 socket 上的读就绪事件。&lt;/li&gt;&#xA;&lt;li&gt;主线程调用 epoll_wait 等待 socket上有数据可读。&lt;/li&gt;&#xA;&lt;li&gt;当 socket 上有数据可读时，epoll_wait通知主线程。主线程从socket循环读取数据，直到没有更多数据可读，然后将读取到的数据封装成一个请求对象并插入请求队列。&lt;/li&gt;&#xA;&lt;li&gt;睡眠在请求队列上的某个工作线程被唤醒，它获得请求对象并处理客户请求，然后往 epoll 内核事件表中注册 socket上的写就绪事件。&lt;/li&gt;&#xA;&lt;li&gt;主线程调用 epoll_wait 等待 socket 可写。&lt;/li&gt;&#xA;&lt;li&gt;当 socket 可写时，epoll wait 通知主线程。主线程往 socket 上写人服务器处理客户请求的结果。&#xA;&lt;img src=&#34;./img/io_actor/syn_proactor.png&#34; alt=&#34;syn_proactor&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;半同步半异步&#34;&gt;半同步/半异步&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;在I/O模型中，&amp;ldquo;同步&amp;quot;和&amp;quot;异步&amp;quot;区分的是内核向应用程序通知的是何种 I/O 事件（是就绪事件还是完成事件），以及该由谁来完成I/O读写（是应用程序还是内核）。在并发模式中，&amp;ldquo;同步&amp;quot;指的是程序完全按照代码序列的顺序执行∶&amp;ldquo;异步&amp;quot;指的是程序的执行需要由系统事件来驱动。常见的系统事件包括中断、信号等。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unp_Note</title>
      <link>./post/unp_note/</link>
      <pubDate>Mon, 11 Jan 2021 22:40:43 +0800</pubDate>
      <guid>./post/unp_note/</guid>
      <description>&lt;h1 id=&#34;基本流程图&#34;&gt;基本流程图&lt;/h1&gt;&#xA;&lt;p&gt;示范代码: &lt;a href=&#34;https://github.com/vcvvvc/CPP_Test/tree/master/server/socket/practice/8_socket&#34;&gt;https://github.com/vcvvvc/CPP_Test/tree/master/server/socket/practice/8_socket&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;tcp&#34;&gt;TCP&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/unp/server.png&#34; alt=&#34;server&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;udp&#34;&gt;UDP&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/unp/con_udp.jpg&#34; alt=&#34;udp&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;客户角度&#34;&gt;客户角度&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/unp/server2.png&#34; alt=&#34;server2&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;服务器角度&#34;&gt;服务器角度&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/unp/server3.png&#34; alt=&#34;server3&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;套接字选项&#34;&gt;套接字选项&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/unp/server4.png&#34; alt=&#34;server4&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/unp/server5.png&#34; alt=&#34;server5&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;config_init&lt;/li&gt;&#xA;&lt;li&gt;connect_mysql&lt;/li&gt;&#xA;&lt;li&gt;init_socket&lt;/li&gt;&#xA;&lt;li&gt;setsockopt linger&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Socket write_send</title>
      <link>./post/socket_write_send/</link>
      <pubDate>Sat, 21 Nov 2020 14:59:41 +0800</pubDate>
      <guid>./post/socket_write_send/</guid>
      <description>&lt;p&gt;&lt;code&gt;ssize_t write(int fd, const void*buf,size_t nbytes);&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;write函数将buf中的nbytes字节内容写入文件描述符fd.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;成功时返回写的字节数.失败时返回-1. 并设置errno变量. 在网络程序中,当我们向套接字文件描述符写时有两可能.&#xA;1)write的返回值大于0,表示写了部分或者是全部的数据. 这样我们用一个while循环来不停的写入，但是循环过程中的buf参数和nbyte参数得由我们来更新。也就是说，网络写函数是不负责将全部数据写完之后在返回的。&#xA;2)返回的值小于0,此时出现了错误.我们要根据错误类型来处理.&#xA;如果错误为EINTR表示在写的时候出现了中断错误.&#xA;如果为EPIPE表示网络连接出现了问题(对方已经关闭了连接).&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;code&gt;ssize_t read(int fd,void *buf,size_t nbyte)&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;read函数是负责从fd中读取内容.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;当读成功 时,read返回实际所读的字节数,如果返回的值是0 表示已经读到文件的结束了,小于0表示出现了错误.如果错误为EINTR说明读是由中断引起 的, 如果是ECONNREST表示网络连接出了问题. 和上面一样,我们也写一个自己的读函数.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;recv和send函数提供了和read和write差不多的功能.不过它们提供了第四个参数来控制读写操作.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int recv(int sockfd,void *buf,int len,int flags)&#xA;int send(int sockfd,void *buf,int len,int flags)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;前面的三个参数和read, write一样,第四个参数可以是0或者是以下的组合&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;标题&lt;/th&gt;&#xA;          &lt;th&gt;内容&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;MSG_DONTROUTE&lt;/td&gt;&#xA;          &lt;td&gt;不查找表&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;MSG_OOB&lt;/td&gt;&#xA;          &lt;td&gt;接受或者发送带外数据&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;MSG_PEEK&lt;/td&gt;&#xA;          &lt;td&gt;查看数据,并不从系统缓冲区移走数据&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;MSG_WAITALL&lt;/td&gt;&#xA;          &lt;td&gt;等待所有数据&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;MSG_DONTROUTE:是 send函数使用的标志.这个标志告诉IP.目的主机在本地网络上面,没有必要查找表.这个标志一般用网络诊断和路由程序里面.&#xA;MSG_OOB:表示可以接收和发送带外的数据.关于带外数据我们以后会解释的.&lt;/p&gt;&#xA;&lt;p&gt;MSG_PEEK:是recv函数的使用标志, 表示只是从系统缓冲区中读取内容,而不清除系统缓冲区的内容.这样下次读的时候,仍然是一样的内容.一般在有多个进程读写数据时可以使用这个标志.&lt;/p&gt;&#xA;&lt;p&gt;MSG_WAITALL 是recv函数的使用标志,表示等到所有的信息到达时才返回.使用这个标志的时候recv回一直阻塞,直到指定的条件满足,或者是发生了错误. 1)当读到了指定的字节时,函数正常返回.返回值等于len 2)当读到了文件的结尾时,函数正常返回.返回值小于len 3)当操作发生错误时,返回-1,且设置错误为相应的错误号(errno)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Re:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/petershina/article/details/7946615&#34;&gt;https://blog.csdn.net/petershina/article/details/7946615&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Socket file</title>
      <link>./post/socket_file/</link>
      <pubDate>Sun, 13 Sep 2020 16:43:04 +0800</pubDate>
      <guid>./post/socket_file/</guid>
      <description>&lt;p&gt;&lt;strong&gt;socket编程中需要用到的头文件&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;sys/types.h：数据类型定义&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;sys/socket.h：提供socket函数及数据结构&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;netinet/in.h：定义数据结构sockaddr_in&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;arpa/inet.h：提供IP地址转换函数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;netdb.h：提供设置及获取域名的函数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;sys/ioctl.h：提供对I/O控制的函数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;sys/poll.h：提供socket等待测试机制的函数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;其他在网络程序中常见的头文件&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;unistd.h：提供通用的文件、目录、程序及进程操作的函数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;errno.h：提供错误号errno的定义，用于错误处理&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;fcntl.h：提供对文件控制的函数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;time.h：提供有关时间的函数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;crypt.h：提供使用DES加密算法的加密函数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;pwd.h：提供对/etc/passwd文件访问的函数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;shadow.h：提供对/etc/shadow文件访问的函数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;pthread.h：提供多线程操作的函数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;signal.h：提供对信号操作的函数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;sys/wait.h、sys/ipc.h、sys/shm.h：提供进程等待、进程间通讯（IPC）及共享内存的函数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;建议：在编写网络程序时，可以直接使用下面这段头文件代码&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;unistd.h&amp;gt;&#xA;#include &amp;lt;sys/types.h&amp;gt;&#xA;#include &amp;lt;sys/socket.h&amp;gt;&#xA;#include &amp;lt;netdb.h&amp;gt;&#xA;#include &amp;lt;stdio.h&amp;gt;&#xA;#include &amp;lt;stdlib.h&amp;gt;&#xA;#include &amp;lt;string.h&amp;gt;&#xA;#include &amp;lt;ctype.h&amp;gt;&#xA;#include &amp;lt;errno.h&amp;gt;&#xA;#include &amp;lt;malloc.h&amp;gt;&#xA;#include &amp;lt;netinet/in.h&amp;gt;&#xA;#include &amp;lt;arpa/inet.h&amp;gt;&#xA;#include &amp;lt;sys/ioctl.h&amp;gt;&#xA;#include &amp;lt;stdarg.h&amp;gt;&#xA;#include &amp;lt;fcntl.h&amp;gt;&#xA;#include &amp;lt;fcntl.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;p&gt;涉及到用户权限及密码验证问题时加入如下语句：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;shadow.h&amp;gt;&#xA;#include &amp;lt;crypt.h&amp;gt;&#xA;#include &amp;lt;pwd.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;需要注意的是，应该在编译时链接加密算法库，即增加编译选项：-lcrypt&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;涉及到文件及时间操作加入如下语句&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;sys/time.h&amp;gt;&#xA;#include &amp;lt;utime.h&amp;gt;&#xA;#include &amp;lt;time.h&amp;gt;&#xA;#include &amp;lt;sys/stat.h&amp;gt;&#xA;#include &amp;lt;sys/file.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;涉及到多进程操作时加入如下语句&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>epoll use</title>
      <link>./post/epoll_use/</link>
      <pubDate>Thu, 27 Aug 2020 12:09:01 +0800</pubDate>
      <guid>./post/epoll_use/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;#include &amp;lt;sys/epoll.h&amp;gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;epoll与select&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Epoll 没有最大并发连接的限制，上限是最大可以打开文件的数目&#xA;效率提升，epoll对于句柄事件的选择不是遍历的，是事件响应的，就是句柄上事件来就马上选择出来，不需要遍历整个句柄链表，因此效率非常高，内核将句柄用红黑树保存的，IO效率不随FD数目增加而线性下降。&#xA;内存拷贝， select让内核把 FD 消息通知给用户空间的时候使用了内存拷贝的方式，开销较大，但是Epoll 在这点上使用了共享内存的方式，这个内存拷贝也省略了。&#xA;相比于select，epoll最大的好处在于它不会随着监听fd数目的增长而降低效率。因为在内核中的select实现中，它是采用轮询来处理的，轮询的fd数目越多，自然耗时越多。&#xA;并且，在linux/posix_types.h头文件有这样的声明：&#xA;#define __FD_SETSIZE 1024&#xA;表示select最多同时监听1024个fd，当然，可以通过修改头文件再重编译内核来扩大这个数目，但这似乎并不治本。&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;epoll是Linux内核为处理大批量文件描述符而作了改进的poll，是Linux下多路复用IO接口select/poll的增强版本，它能显著提高程序在大量并发连接中只有少量活跃的情况下的系统CPU利用率。原因就是获取事件的时候，它无须遍历整个被侦听的描述符集，只要遍历那些被内核IO事件异步唤醒而加入Ready队列的描述符集合就行了。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;触发模式&#34;&gt;触发模式&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;epoll除了提供select/poll那种IO事件的水平触发（Level Triggered）外，还提供了边缘触发（Edge Triggered），这就使得用户空间程序有可能缓存IO状态，减少epoll_wait/epoll_pwait的调用，提高应用程序效率。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;水平触发（LT）：默认工作模式，即当epoll_wait检测到某描述符事件就绪并通知应用程序时，应用程序可以不立即处理该事件；下次调用epoll_wait时，会再次通知此事件&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;//LevelTriggered(LT) //缺省工作方式，即默认的工作方式,支持blocksocket和no_blocksocket，错误率比较小。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;边缘触发（ET）： 当epoll_wait检测到某描述符事件就绪并通知应用程序时，应用程序必须立即处理该事件。如果不处理，下次调用epoll_wait时，不会再次通知此事件。（直到你做了某些操作导致该描述符变成未就绪状态了，也就是说边缘触发只在状态由未就绪变为就绪时只通知一次）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;//Edge Triggered(ET) //高速工作方式，错误率比较大，只支持no_block socket (非阻塞socket)&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;假设现在对方发送了2k的数据，而我们先读取了1k，然后这时调用了epoll_wait，如果是边沿触发ET，那么这个fd变成就绪状态就会从epoll 队列移除，&#xA;则epoll_wait 会一直阻塞，忽略尚未读取的1k数据; 而如果是水平触发LT，那么epoll_wait 还会检测到可读事件而返回，我们可以继续读取剩下的1k 数据。&#xA;总结: LT模式可能触发的次数更多, 一旦触发的次数多, 也就意味着效率会下降; 但这样也不能就说LT模式就比ET模式效率更低&#xA;因为ET的使用对编程人员提出了更高更精细的要求,一旦使用者编程水平不够, 那ET模式还不如LT模式。&#xA;&#xA;ET模式仅当状态发生变化的时候才获得通知,这里所谓的状态的变化并不包括缓冲区中还有未处理的数据,&#xA;也就是说,如果要采用ET模式,需要一直read/write直到出错为止,很多人反映为什么采用ET模式只接收了一部分数据就再也得不到通知了,大多因为这样;&#xA;而LT模式是只要有数据没有处理就会一直通知下去的.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1-创建一个epoll的句柄&#34;&gt;1. 创建一个epoll的句柄&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int epoll_create(int size);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大。&lt;/p&gt;&#xA;&lt;p&gt;这个参数不同于select()中的第一个参数，给出最大监听的fd+1的值。需要注意的是，当创建好epoll句柄后，它就是会占用一个fd值，在linux下如果查看/proc/进程id/fd/，是能够看到这个fd的，所以在使用完epoll后，必须调用close()关闭，否则可能导致fd被耗尽。&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-将被监听的描述符添加到epoll句柄或从epool句柄中删除或者对监听事件进行修改&#34;&gt;2. 将被监听的描述符添加到epoll句柄或从epool句柄中删除或者对监听事件进行修改&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event); //op为注册事件&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;epoll的事件注册函数，它不同与select()是在监听事件时告诉内核要监听什么类型的事件，而是在这里先注册要监听的事件类型。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;用于控制某个epoll文件描述符上的事件，可以注册事件，修改事件，删除事件。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;EPOLL_CTL_ADD 注册新的fd到epfd中；&lt;/li&gt;&#xA;&lt;li&gt;EPOLL_CTL_MOD 修改已经注册的fd的监听事件；&lt;/li&gt;&#xA;&lt;li&gt;EPOLL_CTL_DEL 从epfd中删除一个fd；&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;3-等待事件触发当超过timeout还没有事件触发时就超时&#34;&gt;3. 等待事件触发，当超过timeout还没有事件触发时，就超时&lt;/h3&gt;&#xA;&lt;p&gt;int epoll_wait(int epfd, struct epoll_event * events, intmaxevents, int timeout);&lt;/p&gt;</description>
    </item>
    <item>
      <title>Socket function</title>
      <link>./post/socket/</link>
      <pubDate>Wed, 26 Aug 2020 22:47:24 +0800</pubDate>
      <guid>./post/socket/</guid>
      <description>&lt;p&gt;&lt;strong&gt;setsockopt&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;获取或者设置与某个套接字关联的选 项。选项可能存在于多层协议中，它们总会出现在最上面的套接字层。当操作套接字选项时，&#xA;&#xA;选项位于的层和选项的名称必须给出。为了操作套接字层的选项，应该 将层的值指定为SOL_SOCKET。为了操作其它层的选项，控制选&#xA;&#xA;项的合适协议号必须给出。例如，为了表示一个选项由TCP协议解析，层应该设定为协议 号TCP。&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;./img/socket/1.png&#34; alt=&#34;option&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;SO_LINGER选项&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;struct linger&#xA;{&#xA;    int l_onoff;&#xA;    int l_linger;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;l_onoff = 0, 数据保持发送完成后立即返回&lt;/li&gt;&#xA;&lt;li&gt;l_onoff = 1, l_linger = 0, 立即放回 放弃发送, 发送rst 自身立即复位&lt;/li&gt;&#xA;&lt;li&gt;l_onoff = 1, l_linger = 1, 阻塞到超时或数据发送完成, 保持尝试发送,超时后立即结束&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;SO_REUSEADDR选项&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;改变了通配绑定时处理源地址冲突的处理方式, 让端口释放后立即就可以被再次使用&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;允许启动一个监听服务器并捆绑其众所周知端口，即使以前建立的将此端口用做他们的本地端口的连接仍存在&lt;/li&gt;&#xA;&lt;li&gt;允许在同一端口上启动同一服务器的多个实例，只要每个实例捆绑一个不同的本地IP地址即可&lt;/li&gt;&#xA;&lt;li&gt;允许单个进程捆绑同一端口到多个套接口上，只要每个捆绑指定不同的本地IP地址即可。一般不用于tco服务器&lt;/li&gt;&#xA;&lt;li&gt;允许完全重复的捆绑&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Re:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/my_life/articles/5174585.html&#34;&gt;https://www.cnblogs.com/my_life/articles/5174585.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/141aa1c41f15&#34;&gt;https://www.jianshu.com/p/141aa1c41f15&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/u010144805/article/details/78579528&#34;&gt;https://blog.csdn.net/u010144805/article/details/78579528&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int fcntl(int fd, int cmd);&#xA;int fcntl(int fd, int cmd, long arg);&#xA;int fcntl(int fd, int cmd, struct flock *lock);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;fcntl函数有5种功能：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;1.复制一个现有的描述符（cmd=F_DUPFD）.&lt;/li&gt;&#xA;&lt;li&gt;2.获得／设置文件描述符标记(cmd=F_GETFD或F_SETFD).&lt;/li&gt;&#xA;&lt;li&gt;3.获得／设置文件状态标记(cmd=F_GETFL或F_SETFL).&lt;/li&gt;&#xA;&lt;li&gt;4.获得／设置异步I/O所有权(cmd=F_GETOWN或F_SETOWN).&lt;/li&gt;&#xA;&lt;li&gt;5.获得／设置记录锁(cmd=F_GETLK,F_SETLK或F_SETLKW).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Re: &lt;a href=&#34;https://www.cnblogs.com/xuyh/p/3273082.html&#34;&gt;https://www.cnblogs.com/xuyh/p/3273082.html&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
