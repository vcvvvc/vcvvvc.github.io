<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sem on VW Blog</title>
    <link>https://vcvvvc.github.io/tags/sem/</link>
    <description>Recent content in Sem on VW Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 23 Jan 2021 20:45:54 +0800</lastBuildDate>
    <atom:link href="https://vcvvvc.github.io/tags/sem/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux Sem</title>
      <link>https://vcvvvc.github.io/post/sem/</link>
      <pubDate>Sat, 23 Jan 2021 20:45:54 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/sem/</guid>
      <description>&lt;p&gt;&lt;strong&gt;信号量是一种特殊的变量，它只能取自然数值并且只支持两种操作：等待(P)和信号(V).假设有信号量SV，对其的P、V操作如下：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;P，如果SV的值大于0，则将其减一；若SV的值为0，则挂起执行&lt;/li&gt;&#xA;&lt;li&gt;V，如果有其他进行因为等待SV而挂起，则唤醒；若没有，则将SV值加一&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;code&gt;int sem_init(sem_t *sem, int pshared, unsigned int value)&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;初始化m_sem value为指定信号量的初始值&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;pshared为0 信号量在进程的线程之间共享&lt;/li&gt;&#xA;&lt;li&gt;pshared非0 信号量在进程之间共享&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sem_init函数用于初始化一个未命名的信号量&#xA;sem_destory函数用于销毁信号量&#xA;sem_wait函数将以原子操作方式将信号量减一,信号量为0时,sem_wait阻塞&#xA;sem_post函数以原子操作方式将信号量加一,信号量大于0时,唤醒调用sem_post的线程&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;调用seminit函数时，操作系统将创建信号量对象，此对象中记录着“信号量值”（semaphoreValue）整数。&#xA;该值在调用sem_post函数时增1，调用semwait函数时减1。&#xA;但信号量的值不能小于0，因此，在信号量为0的情况下调用sem一vait函数时，调用函数的线程将进人阻塞状态（因为函数未返回）。&#xA;当然，此时如果有其他线程调用sem一post函数，信号量的值将变为1，而原本阻塞的线程可以将该信号量重新减为0并跳出阻塞状态。&#xA;实际上就是通过这种特性完成临界区的同步操作，可以通过如下形式同步临界区（假设信号量的初始值为1）。&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;**类中主要是Linux下三种锁进行封装，将锁的创建于销毁函数封装在类的构造与析构函数中，实现RAII机制&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class sem{&#xA;    public:&#xA;        //构造函数&#xA;        sem()&#xA;        {&#xA;            //信号量初始化&#xA;            if(sem_init(&amp;amp;m_sem,0,0)!=0){&#xA;                throw std::exception();&#xA;            }&#xA;        }&#xA;        //析构函数&#xA;        ~sem()&#xA;        {&#xA;            //信号量销毁&#xA;            sem_destroy(&amp;amp;m_sem);&#xA;        }&#xA;    private:&#xA;        sem_t m_sem;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;p&gt;Reference:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/m0_45867846/article/details/109021863&#34;&gt;https://blog.csdn.net/m0_45867846/article/details/109021863&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
