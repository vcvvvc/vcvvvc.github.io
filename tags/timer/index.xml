<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Timer on VW Blog</title>
    <link>./tags/timer/</link>
    <description>Recent content in Timer on VW Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 07 Feb 2021 21:45:11 +0800</lastBuildDate>
    <atom:link href="./tags/timer/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Timer function</title>
      <link>./post/timer_function/</link>
      <pubDate>Sun, 07 Feb 2021 21:45:11 +0800</pubDate>
      <guid>./post/timer_function/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;非活跃，是指客户端（这里是浏览器）与服务器端建立连接后，长时间不交换数据，一直占用服务器端的文件描述符，导致连接资源的浪费。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;定时事件，是指固定一段时间之后触发某段代码，由该段代码处理一个事件，如从内核事件表删除事件，并关闭文件描述符，释放连接资源。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;定时器，是指利用结构体或其他形式，将多种定时事件进行封装起来。具体的，这里只涉及一种定时事件，即定期检测非活跃连接，这里将该定时事件与连接资源封装为一个结构体定时器。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;定时器容器，是指使用某种容器类数据结构，将上述多个定时器组合起来，便于对定时事件统一管理。具体的，项目中使用升序链表将所有定时器串联组织起来。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Linux下提供了三种定时的方法:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;socket选项SO_RECVTIMEO和SO_SNDTIMEO&lt;/li&gt;&#xA;&lt;li&gt;SIGALRM信号&lt;/li&gt;&#xA;&lt;li&gt;I/O复用系统调用的超时参数&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;socket选项&#34;&gt;Socket选项&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/timer/socket_timer.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;struct timeval timeout;&#xA;timeout.tv_sec = time;&#xA;timeout.tv_usec = 0;&#xA;&#xA;socklen_t time_len = sizeof(timeout);&#xA;ret = setsockopt(sockfd, SOL_SOCKET, SO_SNDTIMEO, &amp;amp;timeout, time_len); //发送数据超时&#xA;用返回值errno判断是否达到指定时间 (errno == SO_SNDTIMEO)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h1 id=&#34;sigalrm信号&#34;&gt;SIGALRM信号&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;sigaction结构体&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;struct sigaction {&#xA;    void (*sa_handler)(int);&#xA;    void (*sa_sigaction)(int, siginfo_t *, void *);&#xA;    sigset_t sa_mask;&#xA;    int sa_flags;&#xA;    void (*sa_restorer)(void);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;sa_handler是一个函数指针，指向信号处理函数&#xA;sa_sigaction同样是信号处理函数，有三个参数，可以获得关于信号更详细的信息&#xA;sa_mask用来指定在信号处理函数执行期间需要被屏蔽的信号&#xA;sa_flags用于指定信号处理的行为&#xA;SA_RESTART，使被信号打断的系统调用自动重新发起&#xA;SA_NOCLDSTOP，使父进程在它的子进程暂停或继续运行时不会收到 SIGCHLD 信号&#xA;SA_NOCLDWAIT，使父进程在它的子进程退出时不会收到 SIGCHLD 信号，这时子进程如果退出也不会成为僵尸进程&#xA;SA_NODEFER，使对信号的屏蔽无效，即在信号处理函数执行期间仍能发出这个信号&#xA;SA_RESETHAND，信号处理之后重新设置为默认的处理方式&#xA;SA_SIGINFO，使用 sa_sigaction 成员而不是 sa_handler 作为信号处理函数&#xA;sa_restorer一般不使用&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
