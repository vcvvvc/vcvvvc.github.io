<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on VW Blog</title>
    <link>https://vcvvvc.github.io/tags/linux/</link>
    <description>Recent content in Linux on VW Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 01 Apr 2024 16:42:04 +0800</lastBuildDate>
    <atom:link href="https://vcvvvc.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker use Tutorial</title>
      <link>https://vcvvvc.github.io/post/docker_tutorial/</link>
      <pubDate>Mon, 01 Apr 2024 16:42:04 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/docker_tutorial/</guid>
      <description>&lt;p&gt;2024年版本&lt;/p&gt;&#xA;&lt;h2 id=&#34;install-docker-on-ubuntu&#34;&gt;Install docker on Ubuntu&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Add Docker&amp;#39;s official GPG key:&#xA;sudo apt-get update&#xA;sudo apt-get install ca-certificates curl&#xA;sudo install -m 0755 -d /etc/apt/keyrings&#xA;sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc&#xA;sudo chmod a+r /etc/apt/keyrings/docker.asc&#xA;&#xA;# Add the repository to Apt sources:&#xA;echo \&#xA;  &amp;#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \&#xA;  $(. /etc/os-release &amp;amp;&amp;amp; echo &amp;#34;$VERSION_CODENAME&amp;#34;) stable&amp;#34; | \&#xA;  sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null&#xA;sudo apt-get update&#xA;&#xA;sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin&#xA;sudo docker run hello-world&#xA;&#xA;# 重启&#xA;service docker restart&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;install-postgresql&#34;&gt;Install PostgreSQL&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker pull postgres&#xA;docker run --name mypsql -e POSTGRES_PASSWORD=my_password -d -p 5432:5432 -v /path/to/data:/var/lib/postgresql/data postgres&#xA;docker exec -it mypsql psql -U postgres&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;docker-usage&#34;&gt;Docker usage&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 查找镜像&#xA;docker search hello-world&#xA;&#xA;# 获取镜像&#xA;docker pull hello-world&#xA;&#xA;# 镜像列表&#xA;docker images &#xA;REPOSITORY    TAG       IMAGE ID       CREATED         SIZE&#xA;hello-world   latest    d2c94e258dcb   12 months ago   13.3kB&#xA;&#xA;# 运行镜像&#xA;docker run hello-world&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;docker-container&#34;&gt;Docker container&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 查看所有容器&#xA;docker ps -a&#xA;&#xA;# 启动容器&#xA;docker start $id&#xA;&#xA;# 停止容器&#xA;docker stop $id&#xA;&#xA;# 重启容器&#xA;docker restart $id&#xA;&#xA;# 进入容器&#xA;1. docker attach $id&#xA;2. docker exec -it $id /bin/bash&#xA;&#xA;# 删除容器&#xA;docker rm $id&#xA;&#xA;# 导出容器&#xA;docker export $id &amp;gt; ubuntu.tar&#xA;&#xA;# 导入容器&#xA;cat docker/ubuntu.tar | docker import - test/ubuntu:v1&#xA;&#xA;# 运行一个web&#xA;docker pull training/webapp&#xA;&#xA;# 更新一个容器 &#xA;docker run -it --name my_container ubuntu:18.04 bash&#xA;docker run -t -i ubuntu:18.04 /bin/bash&#xA; - apt-get update&#xA; - apt-get install gcc&#xA;&#xA;docker commit -m=&amp;#34;install gcc&amp;#34; -a=&amp;#34;vvvttest&amp;#34; 3635723fd832 vvvttest/ubuntu:v1&#xA;&#xA;# 创建一个容器&#xA;Dockerfile: &#xA;# syntax=docker/dockerfile:1&#xA;FROM node:16-alpine&#xA;WORKDIR /app&#xA;COPY . .&#xA;RUN yarn install --production&#xA;CMD [&amp;#34;node&amp;#34;, &amp;#34;src/index.js&amp;#34;]&#xA;&#xA;&#xA;&#xA;docker build -t getting-started .&#xA;docker run -dp 3000:3000 getting-started&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository&#34;&gt;https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>TIME_WAIT与SO_LINGER</title>
      <link>https://vcvvvc.github.io/post/time_wait%E4%B8%8Eso_linger/</link>
      <pubDate>Mon, 29 May 2023 21:13:27 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/time_wait%E4%B8%8Eso_linger/</guid>
      <description>&lt;h2 id=&#34;time_wait&#34;&gt;TIME_WAIT&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;主动关闭方在收到被动关闭方的FIN包后并返回ACK后，会进入TIME_WAIT状态，TIME_WAIT状态又称2MSL状态，每个TCP连接都必须有一个最大报文段生存时间MSL，在网络传输中超过这个时间的报文段将被丢弃。当TCP连接发起一个主动关闭，并发出最后一个ACK时，必须在TIME_WAIT状态停留两倍MSL时间，在2MSL等待期间，定义这个连接的插口(客户端IP地址和端口号，服务器IP地址和端口号的四元组)将不能再被使用。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;主动发起关闭连接的一方，才会有 TIME-WAIT 状态。&#xA;需要TIME-WAIT状态，主要是两个原因：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;防止历史连接中的数据，被后面相同四元组的连接错误的接收；&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;保证「被动关闭连接」的一方，能被正确的关闭；&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;序列号，是 TCP 一个头部字段，标识了 TCP 发送端到 TCP 接收端的数据流的一个字节，因为 TCP 是面向字节流的可靠协议，为了保证消息的顺序性和可靠性，TCP 为每个传输方向上的每个字节都赋予了一个编号，以便于传输成功后确认、丢失后重传以及在接收端保证不会乱序。序列号是一个 32 位的无符号数，因此在到达 4G 之后再循环回到 0。&lt;/p&gt;&#xA;&lt;p&gt;初始序列号，在 TCP 建立连接的时候，客户端和服务端都会各自生成一个初始序列号，它是基于时钟生成的一个随机数，来保证每个连接都拥有不同的初始序列号。初始化序列号可被视为一个 32 位的计数器，该计数器的数值每 4 微秒加 1，循环一次需要 4.55 小时。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;序列号和初始化序列号并不是无限递增的，会发生回绕为初始值的情况，这意味着无法根据序列号来判断新老数据。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;tcp协议头中有seq和ack_seq两个字段，分别代表序列号和确认号。tcp协议通过序列号标识发送的报文段。seq的类型是__u32，当超过__u32的最大值时，会回绕到0。&lt;/p&gt;&#xA;&lt;p&gt;一个tcp流的初始序列号（ISN）并不是从0开始的，而是采用一定的随机算法产生的，因此ISN可能很大（比如(2^32-10)），因此同一个tcp流的seq号可能会回绕到0。而我们tcp对于丢包和乱序等问题的判断都是依赖于序列号大小比较的。此时就出现了所谓的tcp序列号回绕（sequence wraparound）问题。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;TCP 设计了 TIME_WAIT 状态，状态会持续 2MSL 时长，这个时间足以让两个方向上的数据包都被丢弃，使得原来连接的数据包在网络中都自然消失，再出现的数据包一定都是新建立连接所产生的。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;是等待足够的时间以确保最后的 ACK 能让被动关闭方接收，从而帮助其正常关闭。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h4 id=&#34;time-wait状态过多危害&#34;&gt;TIME-WAIT状态过多危害&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;第一是占用系统资源，比如文件描述符、内存资源、CPU 资源、线程资源等；&lt;/li&gt;&#xA;&lt;li&gt;第二是占用端口资源，端口资源也是有限的，一般可以开启的端口为 32768～61000，也可以通过 net.ipv4.ip_local_port_range参数指定范围。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;出现过多的原因&#34;&gt;出现过多的原因&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;HTTP 没有使用长连接&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;HTTP 长连接超时&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;HTTP 长连接的请求数量达到上限&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;so_linger&#34;&gt;SO_LINGER&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;SO_LINGER选项的作用是等待发送缓冲区中的数据发送完成，但是并不保证发送缓冲区中的数据一定被对端接收（对端宕机或线路问题），只是说会等待一段时间让这个过程完成。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;linger&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; l_onoff; &lt;span style=&#34;color:#75715e&#34;&gt;//0=off, nonzero=on(开关)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; l_linger; &lt;span style=&#34;color:#75715e&#34;&gt;//linger time(延迟时间)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;l_onoff&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;l_linger&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;closesocket&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;发送队列&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;底层行为&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;关闭&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;立即返回&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;保持直到发送完成&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;系统接管套接字并保证将数据发送至对端。（就是正常的close）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;立即返回&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;立即放弃&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;直接发送RST包，自身立即复位，不用经过2MSL状态。对端收到复位错误号。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;阻塞直到l_linger时间超时或数据发送完成。&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;在超时时间段内保持尝试发送，若超时则立即放弃。&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;设置超时时间，若超时未完成数据发送，则立即返回按linger = 0的行为关闭&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;re&#34;&gt;Re:&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/99943313&#34;&gt;https://zhuanlan.zhihu.com/p/99943313&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>SO_REUSEPORT与SO_REUSEADDR</title>
      <link>https://vcvvvc.github.io/post/so_reuseport%E4%B8%8Eso_reuseaddr/</link>
      <pubDate>Mon, 29 May 2023 20:54:49 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/so_reuseport%E4%B8%8Eso_reuseaddr/</guid>
      <description>&lt;h2 id=&#34;so_reuseport端口重用&#34;&gt;SO_REUSEPORT端口重用&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; opt_val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;setsockopt(sockfd, SOL_SOCKET, SO_REUSEPORT, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;opt_val, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(opt_val))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;SO_REUSEPORT是允许多个socket绑定到同一个ip+port上&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;每一个线程拥有自己的服务器套接字, 在服务器套接字上没有了锁的竞争&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;内核层面实现负载均衡&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;so_reuseport在以下场景下有用&#34;&gt;SO_REUSEPORT在以下场景下有用：&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;当服务器需要使用多个进程或线程来监听相同的端口，而不想遇到惊群现象或资源竞争时，可以设置SO_REUSEPORT选项，以便实现网络连接的负载均衡。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;当服务器需要使用UDP协议来接收多播数据报时，可以设置SO_REUSEPORT选项，以便让每个进程或线程接收到不同的数据报，提高效率和性能。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;EPOLL惊群问题&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;so_reuseaddr是地址重用&#34;&gt;SO_REUSEADDR是地址重用&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; opt_val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;opt_val, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(opt_val))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;SO_REUSEADDR可以解决服务器主动关闭连接后，需要等待2MSL时间才能重新绑定相同的端口的问题。如果不设置这个选项，服务器在关闭连接后，会进入TIME_WAIT状态，此时再次启动服务器，就会绑定失败，报：Address already in use。如果设置了这个选项，服务器就可以立即重启并绑定相同的端口&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;SO_REUSEADDR可以解决服务器使用通配符IP地址（0.0.0.0）监听端口后，无法再绑定具体的IP地址到相同的端口的问题。如果不设置这个选项，当一个socket绑定到0.0.0.0:port后，其他socket就无法绑定到192.168.0.1:port等具体的IP地址上。如果设置了这个选项，就可以允许多个socket绑定到相同的端口，只要它们使用不同的本地IP地址&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;so_reuseaddr在以下场景下有用&#34;&gt;SO_REUSEADDR在以下场景下有用：&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;当服务器需要频繁地启动和关闭，而不想等待2MSL时间才能重新绑定相同的端口时，可以设置SO_REUSEADDR选项，以便快速重启。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;当服务器需要使用通配符IP地址（0.0.0.0）监听端口，同时又想绑定其他具体的IP地址到相同的端口时，可以设置SO_REUSEADDR选项，以便支持多个IP地址的监听。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;epoll惊群&#34;&gt;Epoll惊群&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/epoll_use/jingqun.png&#34; alt=&#34;jingqun&#34;&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;sys/epoll.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;netdb.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;sys/wait.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PROCESS_NUM 10&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_and_bind&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;port)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; fd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; socket(PF_INET, SOCK_STREAM, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sockaddr_in&lt;/span&gt; serveraddr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    serveraddr.sin_family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AF_INET;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    serveraddr.sin_addr.s_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; htonl(INADDR_ANY);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    serveraddr.sin_port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; htons(atoi(port));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bind(fd, (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sockaddr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;serveraddr, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(serveraddr));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; fd;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;make_socket_non_blocking&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sfd)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; flags, s;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    flags &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fcntl (sfd, F_GETFL, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (flags &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        perror (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fcntl&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    flags &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; O_NONBLOCK;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fcntl (sfd, F_SETFL, flags);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        perror (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fcntl&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define MAXEVENTS 64&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;argv[])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sfd, s;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; efd;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;epoll_event&lt;/span&gt; event;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;epoll_event&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;events;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sfd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_and_bind(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8001&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (sfd &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        abort ();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; make_socket_non_blocking (sfd);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        abort ();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; listen(sfd, SOMAXCONN);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        perror (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;listen&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        abort ();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    efd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; epoll_create(MAXEVENTS);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (efd &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        perror(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;epoll_create&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        abort();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    event.data.fd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sfd;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//event.events = EPOLLIN | EPOLLET;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    event.events &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EPOLLIN;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; epoll_ctl(efd, EPOLL_CTL_ADD, sfd, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;event);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        perror(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;epoll_ctl&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        abort();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* Buffer where events are returned */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    events &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calloc(MAXEVENTS, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt; event);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; PROCESS_NUM; k&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fork();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(pid &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;/* The event loop */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n, i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; epoll_wait(efd, events, MAXEVENTS, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;process %d return from epoll_wait!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, getpid());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((events[i].events &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; EPOLLERR) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; (events[i].events &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; EPOLLHUP) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(events[i].events &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; EPOLLIN)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#75715e&#34;&gt;/* An error has occured on this fd, or the socket is not ready for reading (why were we notified then?) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        fprintf (stderr, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;epoll error&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        close (events[i].data.fd);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (sfd &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; events[i].data.fd)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#75715e&#34;&gt;/* We have a notification on the listening socket, which means one or more incoming connections. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sockaddr&lt;/span&gt; in_addr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        socklen_t in_len;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; infd;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; hbuf[NI_MAXHOST], sbuf[NI_MAXSERV];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        in_len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt; in_addr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        infd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; accept(sfd, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;in_addr, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;in_len);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (infd &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;process %d accept failed!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, getpid());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;process %d accept successed!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, getpid());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#75715e&#34;&gt;/* Make the incoming socket non-blocking and add it to the list of fds to monitor. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        close(infd);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; status;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wait(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;status);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    free (events);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    close (sfd);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; EXIT_SUCCESS;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;re&#34;&gt;Re:&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/c359719435/article/details/51721902&#34;&gt;https://blog.csdn.net/c359719435/article/details/51721902&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>并行、并发、异步、同步</title>
      <link>https://vcvvvc.github.io/post/async_thread/</link>
      <pubDate>Fri, 29 Jul 2022 00:12:53 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/async_thread/</guid>
      <description>&lt;h2 id=&#34;并发和并行&#34;&gt;并发和并行&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;并发&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;通过一种算法将 CPU 资源合理地分配给多个任务，当一个任务执行 I/O 操作时，CPU 可以转而执行其它的任务，等到 I/O 操作完成以后，或者新的任务遇到 I/O 操作时，CPU 再回到原来的任务继续执行。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/async_threaad/%E5%B9%B6%E5%8F%911.gif&#34; alt=&#34;b1&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;并行&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;多核 CPU 的每个核心都可以独立地执行一个任务，而且多个核心之间不会相互干扰。在不同核心上执行的多个任务，是真正地同时运行，这种状态就叫做并行。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/async_threaad/%E5%B9%B6%E8%A1%8C1.gif&#34; alt=&#34;bx1&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;并发+并行&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;每个核心并发执行两个任务，两个核心并行的话就能执行四个任务。当然也可以一个核心执行一个任务，另一个核心并发执行三个任务，这跟操作系统的分配方式，以及每个任务的工作状态有关系。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/async_threaad/%E5%B9%B6%E5%8F%91_%E5%B9%B6%E8%A1%8C.gif&#34; alt=&#34;bfx1&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;异步跟同步&#34;&gt;异步跟同步&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;图为同步/异步&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/async_threaad/7g4kckddvp.jpeg&#34; alt=&#34;a_t&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;同步等待上一步执行完成后才会执行下一步。&lt;/p&gt;&#xA;&lt;p&gt;异步系统当中的解决方案是开启一个额外的线程进行处理。&lt;/p&gt;&#xA;&lt;p&gt;第一个线程获取第一个文件，第二个线程获取第二个文件，第二个线程并不需要等待第一个线程执行完毕再执行。当两个线程都获得到对应的结果之后，再重新同步处理合并结果的操作。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;同步执行&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/async_threaad/%E5%90%8C%E6%AD%A5%E6%89%A7%E8%A1%8C.png&#34; alt=&#34;tb&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;异步&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/async_threaad/%E5%BC%82%E6%AD%A5%E6%89%A7%E8%A1%8C.png&#34; alt=&#34;yb&#34;&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;setTimeout(function cbFn(){&#xA;    console.log(&amp;#39;learnInPro&amp;#39;);&#xA;}, 1000);&#xA; &#xA;console.log(&amp;#39;sync things&amp;#39;);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;setTimeout就是一个异步任务，当JS引擎顺序执行到setTimeout的时候发现他是个异步任务，则会把这个任务挂起，继续执行后面的代码。直到1000ms后，回调函数cbFn才会执行，这就是异步，在执行到setTimeout的时候，JS并不会傻呵呵的等着1000ms执行cbFn回调函数，而是继续执行了后面的代码。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;异步不会造成阻塞&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;异步可以启用额外的线程去执行任务。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;异步并不会缩短任务的时间&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;python异步&#34;&gt;python异步&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; asyncio&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 定义异步函数&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;print_after&lt;/span&gt;(delay, message):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 异步等待&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(delay)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 打印消息&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(message)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 获取事件循环&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;loop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; asyncio&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_event_loop()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 创建任务列表&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tasks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    loop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_task(print_after(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;)),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    loop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_task(print_after(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;World&amp;#39;&lt;/span&gt;)),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 在事件循环中执行任务&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;loop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run_until_complete(asyncio&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;wait(tasks))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 关闭事件循环&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;loop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 多线程实现&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; threading&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 定义一个函数，这个函数将在一个新的线程中运行&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;print_numbers&lt;/span&gt;():&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(i)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 定义另一个函数，这个函数也将在一个新的线程中运行&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;print_letters&lt;/span&gt;():&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; letter &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;abcdefghij&amp;#39;&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(letter)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 创建两个线程&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;t1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; threading&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Thread(target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;print_numbers)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;t2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; threading&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Thread(target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;print_letters)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 启动线程&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;t1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;t2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 等待线程完成&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;t1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;t2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-异步并行&#34; data-lang=&#34;异步并行&#34;&gt;from concurrent.futures import ThreadPoolExecutor&#xA;import time&#xA;&#xA;def task(n):&#xA;    time.sleep(n)&#xA;    return n&#xA;&#xA;# 创建一个线程池&#xA;with ThreadPoolExecutor(max_workers=4) as executor:&#xA;    # 提交任务到线程池&#xA;    futures = [executor.submit(task, n) for n in range(1, 5)]&#xA;    # 获取任务结果&#xA;    for future in futures:&#xA;        print(future.result())&#xA;&#xA;## 2&#xA;from multiprocessing import Pool&#xA;&#xA;def task(n):&#xA;    return n * n&#xA;&#xA;# 创建一个进程池&#xA;with Pool(processes=4) as pool:&#xA;    # 映射任务到进程池&#xA;    results = pool.map(task, range(1, 5))&#xA;    # 输出结果&#xA;    for result in results:&#xA;        print(result)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;re&#34;&gt;Re:&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://c.biancheng.net/view/9486.html&#34;&gt;http://c.biancheng.net/view/9486.html&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Geth_私链创建并链接钱包</title>
      <link>https://vcvvvc.github.io/post/geth_use/</link>
      <pubDate>Sat, 09 Apr 2022 23:03:33 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/geth_use/</guid>
      <description>&lt;h2 id=&#34;1-下载安装geth&#34;&gt;1. 下载安装geth&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://geth.ethereum.org/&#34;&gt;https://geth.ethereum.org/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;2-创建私有链&#34;&gt;2. 创建私有链&lt;/h2&gt;&#xA;&lt;p&gt;创建创世块配置文件 genesis.json&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chainId&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;homesteadBlock&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eip155Block&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eip158Block&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eip150Block&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;coinbase&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0x0000000000000000000000000000000000000000&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;difficulty&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0x40000&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;extraData&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gasLimit&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0xffffffff&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nonce&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0x0000000000000042&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mixhash&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0x0000000000000000000000000000000000000000000000000000000000000000&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;parentHash&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0x0000000000000000000000000000000000000000000000000000000000000000&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0x00&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alloc&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;3-初始化&#34;&gt;3. 初始化&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;geth &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;datadir genesis&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;block init genesis.json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;启动节点&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;geth &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;datadir genesis&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;block &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;networkid &lt;span style=&#34;color:#ae81ff&#34;&gt;1108&lt;/span&gt; console &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;注册账户&#34;&gt;注册账户&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;personal.newAccount(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;Your Password&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#创建两个&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;余额查询&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;my&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;eth.accounts[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eth.getBalance(my)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;personal.newAccount(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;password&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;other&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;eth.accounts[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;personal.unlockAccount(my)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;账户余额查询&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eth.getBalance(my)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eth.getBalance(other)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;挖矿&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;miner.start(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;miner.stop() &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;null&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;转移资产到另一个号&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eth.sendTransaction({from:my, to:other, value:&lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;测试网络&#34;&gt;测试网络&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;geth &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;http &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;http.api db,eth,net,web3,personal  &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;datadir genesis&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;block &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;networkid &lt;span style=&#34;color:#ae81ff&#34;&gt;1108&lt;/span&gt; console &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;out.log&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;re&#34;&gt;Re:&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_40401264/article/details/78095222&#34;&gt;https://blog.csdn.net/weixin_40401264/article/details/78095222&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu20_install_docker</title>
      <link>https://vcvvvc.github.io/post/ubuntu20_install_docker/</link>
      <pubDate>Fri, 01 Apr 2022 22:22:24 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/ubuntu20_install_docker/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/143156163&#34;&gt;https://zhuanlan.zhihu.com/p/143156163&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>何为协程</title>
      <link>https://vcvvvc.github.io/post/%E4%BD%95%E4%B8%BA%E5%8D%8F%E7%A8%8B/</link>
      <pubDate>Sun, 30 Jan 2022 23:18:03 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/%E4%BD%95%E4%B8%BA%E5%8D%8F%E7%A8%8B/</guid>
      <description>&lt;h2 id=&#34;什么是协程&#34;&gt;什么是协程&lt;/h2&gt;&#xA;&lt;p&gt;进程-&amp;gt;线程-&amp;gt;协程&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Re:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://baike.baidu.com/item/&#34;&gt;https://baike.baidu.com/item/&lt;/a&gt;协程/8652240&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://cloud.tencent.com/developer/article/1916705&#34;&gt;https://cloud.tencent.com/developer/article/1916705&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/172471249&#34;&gt;https://zhuanlan.zhihu.com/p/172471249&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/32218874/answers/updated&#34;&gt;https://www.zhihu.com/question/32218874/answers/updated&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/70256971&#34;&gt;https://zhuanlan.zhihu.com/p/70256971&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.python.org/zh-cn/3/library/asyncio-task.html&#34;&gt;https://docs.python.org/zh-cn/3/library/asyncio-task.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Unity: &lt;a href=&#34;https://developer.unity.cn/projects/61c80ba3edbc2a244ffbcf25&#34;&gt;https://developer.unity.cn/projects/61c80ba3edbc2a244ffbcf25&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.nowcoder.com/discuss/821457&#34;&gt;https://www.nowcoder.com/discuss/821457&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://c.biancheng.net/view/5214.html&#34;&gt;http://c.biancheng.net/view/5214.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/59178345&#34;&gt;https://zhuanlan.zhihu.com/p/59178345&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/337946103&#34;&gt;https://zhuanlan.zhihu.com/p/337946103&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43;获取域名IP</title>
      <link>https://vcvvvc.github.io/post/get_domain_ip_cpp/</link>
      <pubDate>Fri, 14 Jan 2022 00:09:51 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/get_domain_ip_cpp/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#https:&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//blog.csdn.net/dosthing/article/details/80383817&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string ip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;www.baidu.com&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hostent&lt;/span&gt; stHostent;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hostent&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pstHostent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;pptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sprintf(buf,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ip&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; iError;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;((pstHostent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gethostbyname(buf)) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; pstHostent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;h_addr_list &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; pstHostent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;h_addr_list[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;can&amp;#39;t parse the domain&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;official hostname: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; pstHostent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;h_name &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(pptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pstHostent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;h_aliases; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pptr &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL; pptr&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alias: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pptr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt;(pstHostent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;h_addrtype)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; AF_INET:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; AF_INET6:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pstHostent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;h_addr_list;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pptr&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;NULL; pptr&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;address:%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,inet_ntop(pstHostent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;h_addrtype, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pptr, buf,&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;first address: %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,inet_ntop(pstHostent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;h_addrtype, pstHostent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;h_addr,buf,&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unkown address type&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Ubuntu20.10 install vscode</title>
      <link>https://vcvvvc.github.io/post/ubuntu2010_install_vscode/</link>
      <pubDate>Thu, 02 Dec 2021 16:06:36 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/ubuntu2010_install_vscode/</guid>
      <description>&lt;p&gt;20.10有点下问题，得简单配置下&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;添加到bashrc-或zshrc&#34;&gt;添加到bashrc 或zshrc&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd ~&#xA;mkdir vscode&#xA;alias code=&amp;#39;code --user-data-dir $HOME/vscode&amp;#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;root运行&#34;&gt;root运行&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;vim /usr/bin/code&#xA;# 跟谷歌浏览器一样 添加&#xA;--no-sandbox&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Ubuntu20.4 install gcc11.2.0</title>
      <link>https://vcvvvc.github.io/post/ubuntu20_install_gcc11/</link>
      <pubDate>Thu, 02 Dec 2021 11:08:36 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/ubuntu20_install_gcc11/</guid>
      <description>&lt;h2 id=&#34;编译安装&#34;&gt;编译安装&lt;/h2&gt;&#xA;&lt;p&gt;make时间比较长。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#直接存sh里&#xA;wget https://mirrors.ustc.edu.cn/gnu/gcc/gcc-11.2.0/gcc-11.2.0.tar.gz&#xA;tar -zxvf gcc-11.2.0.tar.gz&#xA;cd gcc-11.2.0&#xA;./contrib/download_prerequisites&#xA;mkdir build&#xA;cd build&#xA;../configure configure -v --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu --prefix=/usr/local/gcc-11.2 --enable-checking=release --enable-languages=c,c++ --disable-multilib --program-suffix=-11.2&#xA;make -j4&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;设置默认gcc&#34;&gt;设置默认gcc&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ln -s /usr/local/gcc-11.2/bin/g++-11.2 /usr/bin/g++-11.2&#xA;ln -s /usr/local/gcc-11.2/bin/gcc-11.2 /usr/bin/gcc-11.2&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11.2 100&#xA;update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11.2 100&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#选择版本 就一个选项的不会提供选择&#xA;update-alternatives --config gcc&#xA;update-alternatives --config g++&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;gcc -v&#xA;g++ -v&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;re&#34;&gt;Re:&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/wbvalid/article/details/119945557&#34;&gt;https://blog.csdn.net/wbvalid/article/details/119945557&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/EternallyAccompany/article/details/108865331&#34;&gt;https://blog.csdn.net/EternallyAccompany/article/details/108865331&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>readv_writev</title>
      <link>https://vcvvvc.github.io/post/readv_writev/</link>
      <pubDate>Fri, 26 Nov 2021 20:31:17 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/readv_writev/</guid>
      <description>&lt;p&gt;&lt;strong&gt;readv和writev函数用于在一次函数调用中读、写多个非连续缓冲区。有时也将这两个函数称为散布读（scatter read）和聚集写（gather write）。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;sys/uio.h&amp;gt;&#xA;ssize_t readv(int filedes, const struct iovec *iov, int iovcnt); #散布读&#xA;ssize_t writev(int filedes, const struct iovec *iov, int iovcnt); #聚集写&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中的&lt;code&gt;iovec&lt;/code&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;sys/uio.h&amp;gt;&#xA;struct iovec {&#xA;    ptr_t iov_base; /* Starting address */&#xA;    size_t iov_len; /* Length in bytes */&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;代码：&lt;a href=&#34;https://github.com/vcvvvc/CPP_Test/tree/master/test/writev&#34;&gt;https://github.com/vcvvvc/CPP_Test/tree/master/test/writev&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;re&#34;&gt;Re:&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/nufangrensheng/p/3559304.html&#34;&gt;https://www.cnblogs.com/nufangrensheng/p/3559304.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/youngerchina/p/5624567.html&#34;&gt;https://www.cnblogs.com/youngerchina/p/5624567.html&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>ip转换函数</title>
      <link>https://vcvvvc.github.io/post/ip%E8%BD%AC%E6%8D%A2%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sun, 21 Nov 2021 22:08:01 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/ip%E8%BD%AC%E6%8D%A2%E5%87%BD%E6%95%B0/</guid>
      <description>&lt;p&gt;&lt;strong&gt;主机字节序（大端） 和 网络字节序（小端)&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;大端: 0x12 | 0x32 | 0x56&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;小端: 0x56 | 0x34 | 0x12&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;code&gt;Host to Network long/short&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;Network to Host long/short&lt;/code&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;uint32_t htonl(uint32_t hostlong); //将主机的无符号长整型数转换成网络字节序&#xA;uint16_t htons(uint16_t hostshort); //将主机的无符号短整形数转换成网络字节序&#xA;uint32_t ntohl(uint32_t netlong); //将一个无符号长整型数从网络字节序转换为主机字节序&#xA;uint16_t ntohs(uint16_t netshort); //将一个无符号短整形数从网络字节序转换为主机字节序&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/vcvvvc/CPP_Test/tree/master/test/hostto&#34;&gt;https://github.com/vcvvvc/CPP_Test/tree/master/test/hostto&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#把ip地址转化为用于网络传输的二进制数值(32位)&#xA;in_addr_t inet_addr(const char *cp); #少用了&#xA;int inet_aton(const char * cp, struct in_addr *inp); &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#将网络传输的二进制数值转化为成点分十进制的ip地址&#xA;char* inet_ntoa(struct in_addr in);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#这两个函数是随IPv6出现的函数，对于IPv4地址和IPv6地址都适用，函数中p和n分别代表表达（presentation)和数值（numeric)。&#xA;地址的表达格式通常是ASCII字符串，数值格式则是存放到套接字地址结构的二进制值。&#xA;int inet_pton(int family, const char *strptr, void *addrptr);&#xA;const char * inet_ntop(int family, const void *addrptr, char *strptr, size_t len);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/inet_to/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>I/O多路复用</title>
      <link>https://vcvvvc.github.io/post/io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</link>
      <pubDate>Sun, 10 Oct 2021 10:00:00 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</guid>
      <description>&lt;h2 id=&#34;io模型&#34;&gt;I/O模型&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;%5B%5Dhttps://vcvvvc.github.io/post/server_actor/&#34;&gt;https://vcvvvc.github.io/post/server_actor/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;io多路复用&#34;&gt;I/O多路复用&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Select、Poll、Epoll, 多路是指？多个业务方（句柄）并发下来的 IO 。 复用是指？复用这一个后台处理程序。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;select&#34;&gt;Select&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;select()函数主要解决的是accept()函数阻塞问题，而没有解决recv()和send()函数阻塞问题&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;sys/select.h&amp;gt;&#xA;int select(int nfds, fd_set *readset, fd_set *writeset, fd_set *exceptset,struct timeval *timeout);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;nfds参数指定被监听的文件描述符的总数。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;readfds, writefds和exceptfds参数分别指向可读、可写和异常等事件对应的文件描述符集合。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;sys/select.h&amp;gt;&#xA;int FD_ZERO(int fd, fd_set *fdset);   //一个 fd_set类型变量的所有位都设为 0&#xA;int FD_CLR(int fd, fd_set *fdset);  //清除某个位时可以使用&#xA;int FD_SET(int fd, fd_set *fd_set);   //设置变量的某个位置位&#xA;int FD_ISSET(int fd, fd_set *fdset); //测试某个位是否被置位&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;timeout参数用来设置select函数的超时时间&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;struct timeval{&#xA;        long tv_sec;   /*秒 */&#xA;        long tv_usec;  /*微秒 */&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;select示例代码-selectcpp&#34;&gt;select示例代码: &lt;a href=&#34;https://github.com/vcvvvc/CPP_Test/blob/master/server/socket/select&#34;&gt;select.cpp&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;poll&#34;&gt;Poll&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;poll.h&amp;gt;&#xA;int poll(struct pollfd *ufds, unsigned int nfds, int timeout);&#xA;&#xA;struct pollfd {&#xA; int fd;&#x9;&#x9;//文件描述符&#xA; short events;&#x9;//要求查询的事件掩码&#xA; short revents;&#x9;//返回的事件掩码&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;ufds是一个数组，即poll函数可以监视多个文件描述符。&lt;/p&gt;</description>
    </item>
    <item>
      <title>总结mmap(零拷贝)</title>
      <link>https://vcvvvc.github.io/post/use_mmap/</link>
      <pubDate>Mon, 04 Oct 2021 21:10:09 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/use_mmap/</guid>
      <description>&lt;p&gt;&lt;strong&gt;总结分析传统io, mmap, sendfile&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;传统io&#34;&gt;传统IO&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;通过read()把数据从硬盘读取到内核缓冲区，再复制到用户缓冲区；然后再通过write()写入到socket缓冲区，最后写入目标。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/usemmap/v1.jpg&#34; alt=&#34;v1&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;整个过程发生了4次用户态和内核态的上下文切换和4次拷贝&lt;/em&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;用户进程通过read()方法向操作系统发起调用，此时上下文从用户态转向内核态&lt;/li&gt;&#xA;&lt;li&gt;DMA控制器把数据从硬盘中拷贝到读缓冲区&lt;/li&gt;&#xA;&lt;li&gt;CPU把读缓冲区数据拷贝到应用缓冲区，上下文从内核态转为用户态，read()返回&lt;/li&gt;&#xA;&lt;li&gt;用户进程通过write()方法发起调用，上下文从用户态转为内核态&lt;/li&gt;&#xA;&lt;li&gt;CPU将应用缓冲区中数据拷贝到socket缓冲区&lt;/li&gt;&#xA;&lt;li&gt;DMA控制器把数据从socket缓冲区拷贝到网卡，上下文从内核态切换回用户态，write()返回&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/usemmap/v2.jpg&#34; alt=&#34;v2&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;mmap&#34;&gt;mmap&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#用来将某个文件内容映射到内存中，对该内存区域的存取即是直接对该文件内容的读写。&#xA;void *mmap(void *start, size_t length, int prot, int flags, int fd, off_t offsize);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;调用 mmap() 系统调用对文件进行映射后，用户对映射后的内存进行读写实际上是对文件缓存的读写，所以减少了一次系统调用，从而加速了对文件读写的效率。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/usemmap/v3.jpg&#34; alt=&#34;v3&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;整个过程发生了4次用户态和内核态的上下文切换和3次拷贝，具体流程如下：&lt;/em&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;用户进程通过mmap()方法向操作系统发起调用，上下文从用户态转向内核态&lt;/li&gt;&#xA;&lt;li&gt;DMA控制器把数据从硬盘中拷贝到读缓冲区&lt;/li&gt;&#xA;&lt;li&gt;上下文从内核态转为用户态，mmap调用返回&lt;/li&gt;&#xA;&lt;li&gt;用户进程通过write()方法发起调用，上下文从用户态转为内核态&lt;/li&gt;&#xA;&lt;li&gt;CPU将读缓冲区中数据拷贝到socket缓冲区&lt;/li&gt;&#xA;&lt;li&gt;DMA控制器把数据从socket缓冲区拷贝到网卡，上下文从内核态切换回用户态，write()返回&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/usemmap/v4.jpg&#34; alt=&#34;v4&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;munmap&#34;&gt;munmap&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int munmap(void *addr, size_t len); &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;munmap()用来取消参数start 所指的映射内存起始地址，参数length 则是欲取消的内存大小。当进程结束或利用exec 相关函数来执行其他程序时，映射内存会自动解除，但关闭对应的文件描述词时不会解除映射。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;sendfile&#34;&gt;Sendfile&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;sendfile函数在两个文件描述符之间传递数据（完全在内核中操作），从而避免了内核缓冲区和用户缓冲区之间的数据拷贝，效率很高，被称为零拷贝。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ssize_t senfile(int out_fd,int in_fd,off_t* offset,size_t count);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;整个过程发生了2次用户态和内核态的上下文切换和3次拷贝&lt;/em&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;用户进程通过sendfile()方法向操作系统发起调用，上下文从用户态转向内核态&lt;/li&gt;&#xA;&lt;li&gt;DMA控制器把数据从硬盘中拷贝到读缓冲区&lt;/li&gt;&#xA;&lt;li&gt;CPU将读缓冲区中数据拷贝到socket缓冲区&lt;/li&gt;&#xA;&lt;li&gt;DMA控制器把数据从socket缓冲区拷贝到网卡，上下文从内核态切换回用户态，sendfile调用返回&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/usemmap/v5.jpg&#34; alt=&#34;v5&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;sendfiledma-scattergather&#34;&gt;sendfile+DMA Scatter/Gather&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;它将读缓冲区中的数据描述信息&amp;ndash;内存地址和偏移量记录到socket缓冲区，由 DMA 根据这些将数据从读缓冲区拷贝到网卡，相比之前版本减少了一次CPU拷贝的过程&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;整个过程发生了2次用户态和内核态的上下文切换和2次拷贝，其中更重要的是完全没有CPU拷贝&lt;/em&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;用户进程通过sendfile()方法向操作系统发起调用，上下文从用户态转向内核态&lt;/li&gt;&#xA;&lt;li&gt;DMA控制器利用scatter把数据从硬盘中拷贝到读缓冲区离散存储&lt;/li&gt;&#xA;&lt;li&gt;CPU把读缓冲区中的文件描述符和数据长度发送到socket缓冲区&lt;/li&gt;&#xA;&lt;li&gt;DMA控制器根据文件描述符和数据长度，使用scatter/gather把数据从内核缓冲区拷贝到网卡&lt;/li&gt;&#xA;&lt;li&gt;sendfile()调用返回，上下文从内核态切换回用户态&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/usemmap/v6.jpg&#34; alt=&#34;v6&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu20开机自启脚本</title>
      <link>https://vcvvvc.github.io/post/ubuntu20%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Sun, 03 Oct 2021 12:08:21 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/ubuntu20%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E8%84%9A%E6%9C%AC/</guid>
      <description>&lt;p&gt;&lt;em&gt;我测试了好几篇文章,终于有个成功了&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;localservice&#34;&gt;local.service&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;vim  /etc/systemd/system/rc-local.service&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;输入以下内容:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[Unit] &#xA;Description=/etc/rc.local Compatibility &#xA;ConditionPathExists=/etc/rc.local &#xA;&#xA;[Service] &#xA;Type=forking &#xA;ExecStart=/etc/rc.local start &#xA;TimeoutSec=0 &#xA;StandardOutput=tty &#xA;RemainAfterExit=yes &#xA;SysVStartPriority=99 &#xA;&#xA;[Install]&#xA;WantedBy=multi-user.target&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;rclocal&#34;&gt;rc.local&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;vim  /etc/rc.local&lt;/code&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/sh -e &#xA;## rc.local&#xA;&#xA;sh /root/startup.sh&#xA;&#xA;exit 0&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;收尾&#34;&gt;收尾&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;授权 &lt;code&gt;chmod +x /etc/rc.local&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;自启动 &lt;code&gt;systemctl enable rc-local&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;运行 &lt;code&gt;systemctl start rc-local.service&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;查看状态 &lt;code&gt;systemctl status rc-local.service&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;先别重启, &lt;code&gt;ps -x&lt;/code&gt;配合&lt;code&gt;grep&lt;/code&gt;搜索关键字看看进程启动没有&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;之后保存好文件重启进行测试 再次查看是否启动&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;举个例子:&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;startup.sh&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/bash -e&#xA;cd /root/News-D/&#xA;nohup python3 main.py &amp;amp;&#xA;cd /root/News-D/Finance/&#xA;nohup python3 -m http.server 20777 &amp;amp;&#xA;rm nohup.a.out&#xA;exit 0&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;re&#34;&gt;Re:&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/Deskew/p/13798595.html&#34;&gt;https://www.cnblogs.com/Deskew/p/13798595.html&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux_ssh_nohup</title>
      <link>https://vcvvvc.github.io/post/linux_ssh_nohup/</link>
      <pubDate>Sun, 22 Aug 2021 22:03:04 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/linux_ssh_nohup/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Linux系统SSH客户端断开后保持进程继续运行配置方法&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;nohup python3 main.py &amp;amp;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;re&#34;&gt;Re:&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://help.aliyun.com/document_detail/42523.html&#34;&gt;https://help.aliyun.com/document_detail/42523.html&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu20 Install Nvidia drivers</title>
      <link>https://vcvvvc.github.io/post/install_nvidia/</link>
      <pubDate>Thu, 06 May 2021 07:29:52 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/install_nvidia/</guid>
      <description>&lt;p&gt;&lt;strong&gt;2021-05-06更新 完善一下&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;网上教程坑特别多 这个步骤是我自己装好总结的&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;电脑dell&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;显卡1650&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;1-去残留&#34;&gt;1. 去残留&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt-get remove --purge nvidia* &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;2-添加规则&#34;&gt;2. 添加规则&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;vim /etc/modprobe.d/blacklist.conf&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;blacklist nouveau &#xA;options nouveau modeset=0&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;3-验证是否成功&#34;&gt;3. 验证是否成功&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;重启 重启之后输入命令&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo update-initramfs -u&#xA;lsmod | grep nouveau&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;如果没有返回信息代表成功&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;有信息的话 先检查下步骤2 再重启, 也可忽视 我这边见过一次有返回&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;4选择合适的版本&#34;&gt;4.选择合适的版本&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;1.输入命令:  &lt;code&gt;ubuntu-drivers devices&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;2.官网：&lt;a href=&#34;https://www.nvidia.com/en-us/geforce/drivers/&#34;&gt;Nvidia Official website&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;选择合适的版本来进行安装&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo add-apt-repository ppa:graphics-drivers/ppa&#xA;sudo apt-get update&#xA;&#xA;#选择自己的版本 例如我这边安装440&#xA;sudo apt-get install nvidia-driver-440&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;5选择驱动应用&#34;&gt;5.选择驱动应用&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;ubuntu配置点击 软件和更新 ==&amp;gt; 附件驱动 然后选择合适版本的驱动&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Open warehouse =&amp;gt; additional drivers =&amp;gt; choose you drivers .&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Server sum</title>
      <link>https://vcvvvc.github.io/post/server_sum/</link>
      <pubDate>Sun, 04 Apr 2021 18:21:09 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/server_sum/</guid>
      <description>&lt;h2 id=&#34;c标准网络库对比&#34;&gt;c++标准网络库对比&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../../post/c++%E6%A0%87%E5%87%86%E7%BD%91%E7%BB%9C%E5%BA%93/&#34;&gt;https://vcvvvc.github.io/post/c++标准网络库/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;socket-struct整理&#34;&gt;socket struct整理&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../../post/socket_struct/&#34;&gt;https://vcvvvc.github.io/post/socket_struct/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;socket编程需要的头文件整理&#34;&gt;socket编程需要的头文件整理&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../../post/socket_file/&#34;&gt;https://vcvvvc.github.io/post/socket_file/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;socket-function&#34;&gt;socket function&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../../post/socket/&#34;&gt;https://vcvvvc.github.io/post/socket/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;io复用&#34;&gt;I/O复用&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../../post//io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/&#34;&gt;https://vcvvvc.github.io/post//io多路复用&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;sem-function&#34;&gt;sem function&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../../post/sem/&#34;&gt;https://vcvvvc.github.io/post/sem/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;server-io-actor&#34;&gt;server io actor&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../../post/server_actor/&#34;&gt;https://vcvvvc.github.io/post/server_actor/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;timer-function&#34;&gt;timer function&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../../post/timer_function/&#34;&gt;https://vcvvvc.github.io/post/timer_function/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;linux-pthread-线程创建与使用&#34;&gt;Linux Pthread 线程创建与使用&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;../../post/pthread/&#34;&gt;https://vcvvvc.github.io/post/pthread/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;c11-thread&#34;&gt;C++11 thread&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;../../post/cppthread/&#34;&gt;https://vcvvvc.github.io/post/cppthread/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;unp-note&#34;&gt;Unp note&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;../../post/unp_note/&#34;&gt;https://vcvvvc.github.io/post/unp_note/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;tcp_ip--计算机网络&#34;&gt;TCP_IP | 计算机网络&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;../../post/computer_network/&#34;&gt;https://vcvvvc.github.io/post/computer_network/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;exception-class-异常类&#34;&gt;exception class 异常类&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;../../post/cpp_exception/&#34;&gt;https://vcvvvc.github.io/post/cpp_exception/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>getopt_long</title>
      <link>https://vcvvvc.github.io/post/getopt_long/</link>
      <pubDate>Sun, 14 Mar 2021 14:26:33 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/getopt_long/</guid>
      <description>&lt;p&gt;&lt;strong&gt;2021-5-31更新&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;unistd.h&amp;gt;&#xA;extern char *optarg;&#xA;extern int optind, opterr, optopt;&#xA;#include &amp;lt;getopt.h&amp;gt;&#xA;int getopt(int argc, char * const argv[],const char *optstring);&#xA;int getopt_long(int argc, char * const argv[], const char *optstring, const struct option *longopts, int *longindex);&#xA;int getopt_long_only(int argc, char * const argv[], const char *optstring, const struct option *longopts, int *longindex);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参数以及返回值介绍（以上三个函数都适用）：&lt;/p&gt;&#xA;&lt;p&gt;1、argc和argv和main函数的两个参数一致。&lt;/p&gt;&#xA;&lt;p&gt;2、optstring: 表示短选项字符串。&lt;/p&gt;&#xA;&lt;p&gt;形式如“a:b::cd:“，分别表示程序支持的命令行短选项有-a、-b、-c、-d，冒号含义如下：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;只有一个字符，不带冒号——只表示选项， 如-c &lt;/li&gt;&#xA;&lt;li&gt;一个字符，后接一个冒号——表示选项后面带一个参数，如-a 100&lt;/li&gt;&#xA;&lt;li&gt;一个字符，后接两个冒号——表示选项后面带一个可选参数，即参数可有可无，如果带参数，则选项与参数直接不能有空格,形式应该如-b&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;3、longopts：表示长选项结构体。结构如下：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;struct option&#xA;{&#xA;     const char *name;&#xA;     int         has_arg;&#xA;     int        *flag;&#xA;     int         val;&#xA;};&#xA;&#xA; static struct option longOpts[] = {&#xA;      { &amp;#34;daemon&amp;#34;, no_argument, NULL, &amp;#39;D&amp;#39; },&#xA;      { &amp;#34;dir&amp;#34;, required_argument, NULL, &amp;#39;d&amp;#39; },&#xA;      { &amp;#34;out&amp;#34;, required_argument, NULL, &amp;#39;o&amp;#39; },&#xA;      { &amp;#34;log&amp;#34;, required_argument, NULL, &amp;#39;l&amp;#39; },&#xA;      { &amp;#34;split&amp;#34;, required_argument, NULL, &amp;#39;s&amp;#39; },&#xA;      { &amp;#34;http-proxy&amp;#34;, required_argument, &amp;amp;lopt, 1 },&#xA;      { &amp;#34;http-user&amp;#34;, required_argument, &amp;amp;lopt, 2 },&#xA;      { &amp;#34;http-passwd&amp;#34;, required_argument, &amp;amp;lopt, 3 },&#xA;      { &amp;#34;http-proxy-user&amp;#34;, required_argument, &amp;amp;lopt, 4 },&#xA;      { &amp;#34;http-proxy-passwd&amp;#34;, required_argument, &amp;amp;lopt, 5 },&#xA;      { &amp;#34;http-auth-scheme&amp;#34;, required_argument, &amp;amp;lopt, 6 },&#xA;      { &amp;#34;version&amp;#34;, no_argument, NULL, &amp;#39;v&amp;#39; },&#xA;      { &amp;#34;help&amp;#34;, no_argument, NULL, &amp;#39;h&amp;#39; },&#xA;      { 0, 0, 0, 0 }&#xA;    };&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(1)name:表示选项的名称,比如daemon,dir,out等。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tcpdump</title>
      <link>https://vcvvvc.github.io/post/tcpdump/</link>
      <pubDate>Fri, 05 Mar 2021 22:03:34 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/tcpdump/</guid>
      <description>&lt;p&gt;备忘&#xA;简洁明了的教程&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/d9162722f189&#34;&gt;https://www.jianshu.com/p/d9162722f189&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/a57a5b0e58f0&#34;&gt;https://www.jianshu.com/p/a57a5b0e58f0&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/74812069&#34;&gt;https://zhuanlan.zhihu.com/p/74812069&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Clion_remote_debug</title>
      <link>https://vcvvvc.github.io/post/clion_remote_debug/</link>
      <pubDate>Mon, 22 Feb 2021 22:10:27 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/clion_remote_debug/</guid>
      <description>&lt;h1 id=&#34;环境&#34;&gt;环境&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Macos&lt;/li&gt;&#xA;&lt;li&gt;Clion2020.3.2&lt;/li&gt;&#xA;&lt;li&gt;Server: ubuntu18&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;设置&#34;&gt;设置&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;1. 首先添加一个ssh&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/clion_remote/q1.png&#34; alt=&#34;q1&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;2. 部署服务器上传文件&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;选择SFTP协议&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/clion_remote/q2.png&#34; alt=&#34;q2&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;3. 设置本地与远程文件路径&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/clion_remote/q3.png&#34; alt=&#34;q3&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/clion_remote/q4.png&#34; alt=&#34;q4&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;4. 上传文件&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/clion_remote/q5.png&#34; alt=&#34;q5&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;5. 设置自动上传&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/clion_remote/q6.png&#34; alt=&#34;q6&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;环境配置&#34;&gt;环境配置&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;安装环境&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Centos&#xA;# cmake&#xA;yum install cmake -y&#xA;&#xA;# gcc &amp;amp; gdb&#xA;yum install gcc-c++ -y&#xA;yum install gdb -y&#xA;&#xA;#gdbserver&#xA;yum install gdb-gdbserver -y&#xA;&#xA;Ubuntu&#xA;apt-get install cmake&#xA;apt-get install gcc&#xA;apt-get install g++&#xA;apt-get install gdb&#xA;apt-get install gdbserver&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;gdbserver配置&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;target remote中格式是: tcp:ip:port&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/clion_remote/q7.png&#34; alt=&#34;q7&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;远程调试&#34;&gt;远程调试&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;编译程序 -g 或者cmkae&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Use_gdb</title>
      <link>https://vcvvvc.github.io/post/use_gdb/</link>
      <pubDate>Wed, 17 Feb 2021 23:02:08 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/use_gdb/</guid>
      <description>&lt;h1 id=&#34;gdb-教程&#34;&gt;GDB 教程&lt;/h1&gt;&#xA;&lt;p&gt;转载自：https://github.com/DAN-AND-DNA/learn-gdb-by-example-for-c.git&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;内容&#34;&gt;内容&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E5%8E%9F%E7%90%86&#34;&gt;原理&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E5%90%AF%E5%8A%A8gdb&#34;&gt;启动gdb&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E9%80%80%E5%87%BAgdb&#34;&gt;退出gdb&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E4%B8%BAgdb%E8%BF%9B%E8%A1%8C%E7%BC%96%E8%AF%91&#34;&gt;为gdb进行编译&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E8%B0%83%E8%AF%95%E7%A8%8B%E5%BA%8F&#34;&gt;调试程序&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#CoreDump%E7%AE%80%E5%8D%95%E6%A6%82%E5%BF%B5&#34;&gt;CoreDump简单概念&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E4%BA%A7%E7%94%9FCoreDump%E6%96%87%E4%BB%B6&#34;&gt;产生CoreDump文件&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E8%B0%83%E8%AF%95CoreDump%E6%96%87%E4%BB%B6&#34;&gt;调试CoreDump文件&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#help%E5%91%BD%E4%BB%A4&#34;&gt;help命令&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#list%E5%91%BD%E4%BB%A4&#34;&gt;list命令&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#start%E5%91%BD%E4%BB%A4&#34;&gt;start命令&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#next%E5%91%BD%E4%BB%A4&#34;&gt;next命令&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#step%E5%91%BD%E4%BB%A4&#34;&gt;step命令&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#break%E5%91%BD%E4%BB%A4&#34;&gt;break命令&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E6%9F%A5%E7%9C%8B%E6%96%AD%E7%82%B9&#34;&gt;查看断点&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E5%88%A0%E9%99%A4%E6%96%AD%E7%82%B9&#34;&gt;删除断点&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#tbreak%E5%91%BD%E4%BB%A4&#34;&gt;tbreak命令&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#continue%E5%91%BD%E4%BB%A4&#34;&gt;continue命令&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#backtrace%E5%91%BD%E4%BB%A4&#34;&gt;backtrace命令&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8D%E6%89%80%E5%A4%84%E7%9A%84%E5%87%BD%E6%95%B0%E5%A0%86%E6%A0%88%E5%B8%A7&#34;&gt;查看当前所处的函数堆栈帧&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E9%80%89%E6%8B%A9%E5%87%BD%E6%95%B0%E5%A0%86%E6%A0%88%E5%B8%A7&#34;&gt;选择函数堆栈帧&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E6%89%93%E5%8D%B0%E5%87%BD%E6%95%B0%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F&#34;&gt;打印函数局部变量&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#run%E5%91%BD%E4%BB%A4&#34;&gt;run命令&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E4%BF%AE%E6%94%B9%E5%8F%98%E9%87%8F%E5%80%BC&#34;&gt;修改变量值&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E6%9F%A5%E7%9C%8B%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B&#34;&gt;查看变量类型&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E6%9F%A5%E7%9C%8B%E7%BA%BF%E7%A8%8B%E8%BF%90%E8%A1%8C&#34;&gt;查看线程运行&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E5%90%AF%E5%8A%A8%E5%9B%BE%E5%83%8F%E7%95%8C%E9%9D%A2&#34;&gt;启动图像界面&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;原理&#34;&gt;原理&lt;/h2&gt;&#xA;&lt;p&gt;断点功能一般是通过gdb捕获特定的内核信号来实现的，然后定位目标程序停止的地址来判断断点是否成功触发。大致的流程为，&#xA;首先gdb fork()出来一个子进程，该子进程启动目标程序(通过ptrace() 和 exec())，&#xA;父进程捕获该子进程的所有的信号(通过ptrace() 和 wait())，当子进程收到信号时，子进程就会被挂起，直到父进程通知其继续运行(通过ptrace())&lt;/p&gt;&#xA;&lt;h2 id=&#34;启动gdb&#34;&gt;启动gdb&lt;/h2&gt;&#xA;&lt;p&gt;1 常规启动，非常多的提示信息:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ gdb&#xA;GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-114.el7&#xA;Copyright (C) 2013 Free Software Foundation, Inc.&#xA;License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;&#xA;This is free software: you are free to change and redistribute it.&#xA;There is NO WARRANTY, to the extent permitted by law.  Type &amp;quot;show copying&amp;quot;&#xA;and &amp;quot;show warranty&amp;quot; for details.&#xA;This GDB was configured as &amp;quot;x86_64-redhat-linux-gnu&amp;quot;.&#xA;For bug reporting instructions, please see:&#xA;&amp;lt;http://www.gnu.org/software/gdb/bugs/&amp;gt;.&#xA;(gdb)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;2 简约启动，关闭提示信息:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Timer function</title>
      <link>https://vcvvvc.github.io/post/timer_function/</link>
      <pubDate>Sun, 07 Feb 2021 21:45:11 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/timer_function/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;非活跃，是指客户端（这里是浏览器）与服务器端建立连接后，长时间不交换数据，一直占用服务器端的文件描述符，导致连接资源的浪费。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;定时事件，是指固定一段时间之后触发某段代码，由该段代码处理一个事件，如从内核事件表删除事件，并关闭文件描述符，释放连接资源。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;定时器，是指利用结构体或其他形式，将多种定时事件进行封装起来。具体的，这里只涉及一种定时事件，即定期检测非活跃连接，这里将该定时事件与连接资源封装为一个结构体定时器。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;定时器容器，是指使用某种容器类数据结构，将上述多个定时器组合起来，便于对定时事件统一管理。具体的，项目中使用升序链表将所有定时器串联组织起来。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Linux下提供了三种定时的方法:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;socket选项SO_RECVTIMEO和SO_SNDTIMEO&lt;/li&gt;&#xA;&lt;li&gt;SIGALRM信号&lt;/li&gt;&#xA;&lt;li&gt;I/O复用系统调用的超时参数&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;socket选项&#34;&gt;Socket选项&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/timer/socket_timer.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;struct timeval timeout;&#xA;timeout.tv_sec = time;&#xA;timeout.tv_usec = 0;&#xA;&#xA;socklen_t time_len = sizeof(timeout);&#xA;ret = setsockopt(sockfd, SOL_SOCKET, SO_SNDTIMEO, &amp;amp;timeout, time_len); //发送数据超时&#xA;用返回值errno判断是否达到指定时间 (errno == SO_SNDTIMEO)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h1 id=&#34;sigalrm信号&#34;&gt;SIGALRM信号&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;sigaction结构体&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;struct sigaction {&#xA;    void (*sa_handler)(int);&#xA;    void (*sa_sigaction)(int, siginfo_t *, void *);&#xA;    sigset_t sa_mask;&#xA;    int sa_flags;&#xA;    void (*sa_restorer)(void);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;sa_handler是一个函数指针，指向信号处理函数&#xA;sa_sigaction同样是信号处理函数，有三个参数，可以获得关于信号更详细的信息&#xA;sa_mask用来指定在信号处理函数执行期间需要被屏蔽的信号&#xA;sa_flags用于指定信号处理的行为&#xA;SA_RESTART，使被信号打断的系统调用自动重新发起&#xA;SA_NOCLDSTOP，使父进程在它的子进程暂停或继续运行时不会收到 SIGCHLD 信号&#xA;SA_NOCLDWAIT，使父进程在它的子进程退出时不会收到 SIGCHLD 信号，这时子进程如果退出也不会成为僵尸进程&#xA;SA_NODEFER，使对信号的屏蔽无效，即在信号处理函数执行期间仍能发出这个信号&#xA;SA_RESETHAND，信号处理之后重新设置为默认的处理方式&#xA;SA_SIGINFO，使用 sa_sigaction 成员而不是 sa_handler 作为信号处理函数&#xA;sa_restorer一般不使用&lt;/p&gt;</description>
    </item>
    <item>
      <title>Server actor</title>
      <link>https://vcvvvc.github.io/post/server_actor/</link>
      <pubDate>Sun, 31 Jan 2021 22:19:30 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/server_actor/</guid>
      <description>&lt;p&gt;&lt;strong&gt;同步IO模型通常用于实现Reactor模式, 异步IO模型则用于实现Proactor模式。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;reactor&#34;&gt;Reactor&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;Reactor模式要求主线程（I/O处理单元，下同）只负责监听文件描述上是否有事件发生，有的话就立即将该事件通知工作线程（逻辑单元，下同）。除此之外，主线程不做任何其他实质性的工作。读写数据，接受新的连接，以及处理客户请求均在工作线程中完成。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Reactor工作流程∶&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主线程往 epoll内核事件表中注册 socket 上的读就绪事件。&lt;/li&gt;&#xA;&lt;li&gt;主线程调用epoll_wait 等待socket上有数据可读。&lt;/li&gt;&#xA;&lt;li&gt;当socket上有数据可读时，epoll_wait 通知主线程。主线程则将socket可读事件放入请求队列。&lt;/li&gt;&#xA;&lt;li&gt;睡眠在请求队列上的某个工作线程被唤醒，它从socket读取数据，并处理客户请求，然后往 epoll 内核事件表中注册该 socket 上的写就绪事件。&lt;/li&gt;&#xA;&lt;li&gt;主线程调用epoll_wait 等待socket可写。&lt;/li&gt;&#xA;&lt;li&gt;当socket可写时，epoll_wait 通知主线程。主线程将socket可写事件放入请求队列。&lt;/li&gt;&#xA;&lt;li&gt;睡眠在请求队列上的某个工作线程被唤醒，它往socket上写入服务器处理客户请求的结果。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/io_actor/reactor.png&#34; alt=&#34;reactor&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;procactor&#34;&gt;Procactor&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;将多有I/O操作都交给主线程和内核来处理, 工作线程仅负责业务逻辑&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Proactor工作流程∶&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主线程调用aio_read 函数向内核注册 socket 上的读完成事件，并告诉内核用户读缓冲区的位置，以及读操作完成时如何通知应用程序（这里以信号为例，详情请参考sigevent的 man 手册）。&lt;/li&gt;&#xA;&lt;li&gt;主线程继续处理其他逻辑。&lt;/li&gt;&#xA;&lt;li&gt;当socket上的数据被读入用户缓冲区后，内核将向应用程序发送一个信号，以通知应用程序数据已经可用。&lt;/li&gt;&#xA;&lt;li&gt;应用程序预先定义好的信号处理函数选择一个工作线程来处理客户请求。工作线程处理完客户请求之后，调用 aio_write 函数向内核注册 socket 上的写完成事件，并告诉内核用户写缓冲区的位置，以及写操作完成时如何通知应用程序（仍然以信号为例）。&lt;/li&gt;&#xA;&lt;li&gt;主线程继续处理其他逻辑。&lt;/li&gt;&#xA;&lt;li&gt;当用户缓冲区的数据被写人 socket 之后，内核将向应用程序发送一个信号，以通知应用程序数据已经发送完毕。&lt;/li&gt;&#xA;&lt;li&gt;应用程序预先定义好的信号处理函数选择一个工作线程来做善后处理，比如决定是否关闭 socket。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/io_actor/proactor.png&#34; alt=&#34;proactor&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;模拟proactor&#34;&gt;模拟Proactor&lt;/h1&gt;&#xA;&lt;p&gt;使用同步I/O模型（仍然以epoll_wait为例）模拟出的Proactor模式的工作流程∶&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主线程往 epoll 内核事件表中注册 socket 上的读就绪事件。&lt;/li&gt;&#xA;&lt;li&gt;主线程调用 epoll_wait 等待 socket上有数据可读。&lt;/li&gt;&#xA;&lt;li&gt;当 socket 上有数据可读时，epoll_wait通知主线程。主线程从socket循环读取数据，直到没有更多数据可读，然后将读取到的数据封装成一个请求对象并插入请求队列。&lt;/li&gt;&#xA;&lt;li&gt;睡眠在请求队列上的某个工作线程被唤醒，它获得请求对象并处理客户请求，然后往 epoll 内核事件表中注册 socket上的写就绪事件。&lt;/li&gt;&#xA;&lt;li&gt;主线程调用 epoll_wait 等待 socket 可写。&lt;/li&gt;&#xA;&lt;li&gt;当 socket 可写时，epoll wait 通知主线程。主线程往 socket 上写人服务器处理客户请求的结果。&#xA;&lt;img src=&#34;https://vcvvvc.github.io/img/io_actor/syn_proactor.png&#34; alt=&#34;syn_proactor&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;半同步半异步&#34;&gt;半同步/半异步&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;在I/O模型中，&amp;ldquo;同步&amp;quot;和&amp;quot;异步&amp;quot;区分的是内核向应用程序通知的是何种 I/O 事件（是就绪事件还是完成事件），以及该由谁来完成I/O读写（是应用程序还是内核）。在并发模式中，&amp;ldquo;同步&amp;quot;指的是程序完全按照代码序列的顺序执行∶&amp;ldquo;异步&amp;quot;指的是程序的执行需要由系统事件来驱动。常见的系统事件包括中断、信号等。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux Sem</title>
      <link>https://vcvvvc.github.io/post/sem/</link>
      <pubDate>Sat, 23 Jan 2021 20:45:54 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/sem/</guid>
      <description>&lt;p&gt;&lt;strong&gt;信号量是一种特殊的变量，它只能取自然数值并且只支持两种操作：等待(P)和信号(V).假设有信号量SV，对其的P、V操作如下：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;P，如果SV的值大于0，则将其减一；若SV的值为0，则挂起执行&lt;/li&gt;&#xA;&lt;li&gt;V，如果有其他进行因为等待SV而挂起，则唤醒；若没有，则将SV值加一&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;code&gt;int sem_init(sem_t *sem, int pshared, unsigned int value)&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;初始化m_sem value为指定信号量的初始值&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;pshared为0 信号量在进程的线程之间共享&lt;/li&gt;&#xA;&lt;li&gt;pshared非0 信号量在进程之间共享&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sem_init函数用于初始化一个未命名的信号量&#xA;sem_destory函数用于销毁信号量&#xA;sem_wait函数将以原子操作方式将信号量减一,信号量为0时,sem_wait阻塞&#xA;sem_post函数以原子操作方式将信号量加一,信号量大于0时,唤醒调用sem_post的线程&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;调用seminit函数时，操作系统将创建信号量对象，此对象中记录着“信号量值”（semaphoreValue）整数。&#xA;该值在调用sem_post函数时增1，调用semwait函数时减1。&#xA;但信号量的值不能小于0，因此，在信号量为0的情况下调用sem一vait函数时，调用函数的线程将进人阻塞状态（因为函数未返回）。&#xA;当然，此时如果有其他线程调用sem一post函数，信号量的值将变为1，而原本阻塞的线程可以将该信号量重新减为0并跳出阻塞状态。&#xA;实际上就是通过这种特性完成临界区的同步操作，可以通过如下形式同步临界区（假设信号量的初始值为1）。&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;**类中主要是Linux下三种锁进行封装，将锁的创建于销毁函数封装在类的构造与析构函数中，实现RAII机制&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class sem{&#xA;    public:&#xA;        //构造函数&#xA;        sem()&#xA;        {&#xA;            //信号量初始化&#xA;            if(sem_init(&amp;amp;m_sem,0,0)!=0){&#xA;                throw std::exception();&#xA;            }&#xA;        }&#xA;        //析构函数&#xA;        ~sem()&#xA;        {&#xA;            //信号量销毁&#xA;            sem_destroy(&amp;amp;m_sem);&#xA;        }&#xA;    private:&#xA;        sem_t m_sem;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;p&gt;Reference:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/m0_45867846/article/details/109021863&#34;&gt;https://blog.csdn.net/m0_45867846/article/details/109021863&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unp_Note</title>
      <link>https://vcvvvc.github.io/post/unp_note/</link>
      <pubDate>Mon, 11 Jan 2021 22:40:43 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/unp_note/</guid>
      <description>&lt;h1 id=&#34;基本流程图&#34;&gt;基本流程图&lt;/h1&gt;&#xA;&lt;p&gt;示范代码: &lt;a href=&#34;https://github.com/vcvvvc/CPP_Test/tree/master/server/socket/practice/8_socket&#34;&gt;https://github.com/vcvvvc/CPP_Test/tree/master/server/socket/practice/8_socket&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;tcp&#34;&gt;TCP&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/unp/server.png&#34; alt=&#34;server&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;udp&#34;&gt;UDP&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/unp/con_udp.jpg&#34; alt=&#34;udp&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;客户角度&#34;&gt;客户角度&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/unp/server2.png&#34; alt=&#34;server2&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;服务器角度&#34;&gt;服务器角度&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/unp/server3.png&#34; alt=&#34;server3&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;套接字选项&#34;&gt;套接字选项&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/unp/server4.png&#34; alt=&#34;server4&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/unp/server5.png&#34; alt=&#34;server5&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;config_init&lt;/li&gt;&#xA;&lt;li&gt;connect_mysql&lt;/li&gt;&#xA;&lt;li&gt;init_socket&lt;/li&gt;&#xA;&lt;li&gt;setsockopt linger&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Socket write_send</title>
      <link>https://vcvvvc.github.io/post/socket_write_send/</link>
      <pubDate>Sat, 21 Nov 2020 14:59:41 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/socket_write_send/</guid>
      <description>&lt;p&gt;&lt;code&gt;ssize_t write(int fd, const void*buf,size_t nbytes);&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;write函数将buf中的nbytes字节内容写入文件描述符fd.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;成功时返回写的字节数.失败时返回-1. 并设置errno变量. 在网络程序中,当我们向套接字文件描述符写时有两可能.&#xA;1)write的返回值大于0,表示写了部分或者是全部的数据. 这样我们用一个while循环来不停的写入，但是循环过程中的buf参数和nbyte参数得由我们来更新。也就是说，网络写函数是不负责将全部数据写完之后在返回的。&#xA;2)返回的值小于0,此时出现了错误.我们要根据错误类型来处理.&#xA;如果错误为EINTR表示在写的时候出现了中断错误.&#xA;如果为EPIPE表示网络连接出现了问题(对方已经关闭了连接).&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;code&gt;ssize_t read(int fd,void *buf,size_t nbyte)&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;read函数是负责从fd中读取内容.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;当读成功 时,read返回实际所读的字节数,如果返回的值是0 表示已经读到文件的结束了,小于0表示出现了错误.如果错误为EINTR说明读是由中断引起 的, 如果是ECONNREST表示网络连接出了问题. 和上面一样,我们也写一个自己的读函数.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;recv和send函数提供了和read和write差不多的功能.不过它们提供了第四个参数来控制读写操作.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int recv(int sockfd,void *buf,int len,int flags)&#xA;int send(int sockfd,void *buf,int len,int flags)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;前面的三个参数和read, write一样,第四个参数可以是0或者是以下的组合&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;标题&lt;/th&gt;&#xA;          &lt;th&gt;内容&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;MSG_DONTROUTE&lt;/td&gt;&#xA;          &lt;td&gt;不查找表&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;MSG_OOB&lt;/td&gt;&#xA;          &lt;td&gt;接受或者发送带外数据&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;MSG_PEEK&lt;/td&gt;&#xA;          &lt;td&gt;查看数据,并不从系统缓冲区移走数据&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;MSG_WAITALL&lt;/td&gt;&#xA;          &lt;td&gt;等待所有数据&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;MSG_DONTROUTE:是 send函数使用的标志.这个标志告诉IP.目的主机在本地网络上面,没有必要查找表.这个标志一般用网络诊断和路由程序里面.&#xA;MSG_OOB:表示可以接收和发送带外的数据.关于带外数据我们以后会解释的.&lt;/p&gt;&#xA;&lt;p&gt;MSG_PEEK:是recv函数的使用标志, 表示只是从系统缓冲区中读取内容,而不清除系统缓冲区的内容.这样下次读的时候,仍然是一样的内容.一般在有多个进程读写数据时可以使用这个标志.&lt;/p&gt;&#xA;&lt;p&gt;MSG_WAITALL 是recv函数的使用标志,表示等到所有的信息到达时才返回.使用这个标志的时候recv回一直阻塞,直到指定的条件满足,或者是发生了错误. 1)当读到了指定的字节时,函数正常返回.返回值等于len 2)当读到了文件的结尾时,函数正常返回.返回值小于len 3)当操作发生错误时,返回-1,且设置错误为相应的错误号(errno)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Re:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/petershina/article/details/7946615&#34;&gt;https://blog.csdn.net/petershina/article/details/7946615&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vim_config</title>
      <link>https://vcvvvc.github.io/post/vim_config/</link>
      <pubDate>Tue, 13 Oct 2020 18:12:48 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/vim_config/</guid>
      <description>&lt;h1 id=&#34;编译安装&#34;&gt;编译安装&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#https://www.cnblogs.com/JoiT/p/build_from_source_for_linux_vim.html&#xA;apt install libncurses5-dev libgtk2.0-dev libatk1.0-dev \&#xA;libcairo2-dev libx11-dev libxpm-dev libxt-dev&#xA;&#xA;apt-get remove --purge vim-tiny vim vim-runtime gvim vim-common vim-gui-common vim-nox&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./configure --with-features=huge \&#xA;    --enable-multibyte \&#xA;    --enable-gui=gtk3 \&#xA;    --enable-cscope \&#xA;    --prefix=/usr/local&#xA;&#xA;make &#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h1 id=&#34;主题配置&#34;&gt;主题配置&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;首先要确认你的终端支持真彩，一般来说，主流的比如iTerm2, Putty, Powershell的最新版本都已经支持了。我们可以运行以下命令检测一下&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;(echo -e &#39;\e[48:2:1:2:3m\eP$qm\e\\&#39; ; xxd)&lt;/code&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&#xA;&amp;#34;&amp;#34;&amp;#34;=&amp;gt;全局配置&amp;lt;=&amp;#34;&amp;#34;&amp;#34;&#xA;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&#xA;&#xA;&amp;#34;关闭vi兼容模式&amp;#34;&#xA;&#xA;set nocompatible&#xA;&#xA;&amp;#34;设置历史记录步数&amp;#34;&#xA;&#xA;set history=1000&#xA;&#xA;&amp;#34;开启相关插件&amp;#34;   &#xA;&#xA;&amp;#34;侦测文件类型&amp;#34;&#xA;&#xA;filetype on&#xA;&#xA;&amp;#34;载入文件类型插件&amp;#34;&#xA;&#xA;filetype plugin on&#xA;&#xA;&amp;#34;为特定文件类型载入相关缩进文件&amp;#34;&#xA;&#xA;filetype indent on&#xA;&#xA;&amp;#34;当文件在外部被修改时，自动更新该文件&amp;#34;&#xA;&#xA;set autoread&#xA;&#xA;&amp;#34;激活鼠标的使用&amp;#34;&#xA;&#xA;set mouse=a&#xA;&#xA;set selection=exclusive&#xA;&#xA;set selectmode=mouse,key&#xA;&#xA;&amp;#34;保存全局变量&amp;#34;&#xA;&#xA;set viminfo+=!&#xA;&#xA;&amp;#34;带有如下符号的单词不要被换行分割&amp;#34;&#xA;&#xA;set iskeyword+=_,$,@,%,#,-&#xA;&#xA;&amp;#34;通过使用: commands命令，告诉我们文件的哪一行被改变过&amp;#34;&#xA;&#xA;set report=0&#xA;&#xA;&amp;#34;被分割的窗口间显示空白，便于阅读&amp;#34;&#xA;&#xA;set fillchars=vert:\ ,stl:\ ,stlnc:\&#xA;&#xA;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&#xA;&#xA;&amp;#34;&amp;#34;&amp;#34;=&amp;gt;字体和颜色&amp;lt;=&amp;#34;&amp;#34;&amp;#34;&#xA;&#xA;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&#xA;&#xA;&amp;#34;自动开启语法高亮&amp;#34;&#xA;&#xA;syntax enable&#xA;&#xA;&amp;#34;设置字体&amp;#34;&#xA;&#xA;&amp;#34;set guifont=dejaVu\ Sans\ MONO\ 10&#xA;&#xA;set guifont=Courier_New:h10:cANSI&#xA;&#xA;&amp;#34;设置颜色&amp;#34;&#xA;&#xA;&amp;#34;colorscheme desert&#xA;&#xA;&amp;#34;#set t_Co=256 记着注释或者删除这一行&amp;#34;&#xA;&#xA;if has(&amp;#34;termguicolors&amp;#34;)&#xA;&#xA;    set termguicolors&#xA;&#xA;endif&#xA;&#xA;&amp;#34;高亮显示当前行&amp;#34;&#xA;&#xA;&amp;#34;set cursorline    白色条框 不喜欢可以关闭&amp;#34;&#xA;&#xA;set cursorline  &#xA;&#xA;&amp;#34;hi cursorline guibg=#00ff00&amp;#34;&#xA;&#xA;&amp;#34;hi CursorColumn guibg=#00ff00&amp;#34;&#xA;&#xA;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&#xA;&#xA;&amp;#34;&amp;#34;&amp;#34;=&amp;gt;代码折叠功能&amp;lt;=&amp;#34;&amp;#34;&amp;#34;&#xA;&#xA;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&#xA;&#xA;&amp;#34;激活折叠功能&amp;#34;&#xA;&#xA;set foldenable&#xA;&#xA;&amp;#34;set nofen（这个是关闭折叠功能）&amp;#34;&#xA;&#xA;&amp;#34;设置按照语法方式折叠（可简写set fdm=XX）&amp;#34;&#xA;&#xA;&amp;#34;有6种折叠方法：&#xA;&#xA;&amp;#34;manual  手工定义折叠&amp;#34;&#xA;&#xA;&amp;#34;indent  更多的缩进表示更高级别的折叠&amp;#34;&#xA;&#xA;&amp;#34;expr    用表达式来定义折叠&amp;#34;&#xA;&#xA;&amp;#34;syntax  用语法高亮来定义折叠&amp;#34;&#xA;&#xA;&amp;#34;diff    对没有更改的文本进行折叠&amp;#34;&#xA;&#xA;&amp;#34;marker  对文中的标志进行折叠&amp;#34;&#xA;&#xA;set foldmethod=manual&#xA;&#xA;&amp;#34;set fdl=0（这个是不选用任何折叠方法）&amp;#34;&#xA;&#xA;&amp;#34;设置折叠区域的宽度&amp;#34;&#xA;&#xA;&amp;#34;如果不为0，则在屏幕左侧显示一个折叠标识列&#xA;&#xA;&amp;#34;分别用“-”和“+”来表示打开和关闭的折叠&#xA;&#xA;set foldcolumn=0&#xA;&#xA;&amp;#34;设置折叠层数为3&amp;#34;&#xA;&#xA;setlocal foldlevel=3&#xA;&#xA;&amp;#34;设置为自动关闭折叠&amp;#34;&#xA;&#xA;set foldclose=all&#xA;&#xA;&amp;#34;用空格键来代替zo和zc快捷键实现开关折叠&amp;#34;&#xA;&#xA;&amp;#34;zo O-pen a fold (打开折叠)&#xA;&#xA;&amp;#34;zc C-lose a fold (关闭折叠)&#xA;&#xA;&amp;#34;zf F-old creation (创建折叠)&#xA;&#xA;&amp;#34;nnoremap &amp;lt;space&amp;gt; @=((foldclosed(line(&amp;#39;.&amp;#39;)) &amp;lt; 0) ? &amp;#39;zc&amp;#39; : &amp;#39;zo&amp;#39;)&amp;lt;CR&amp;gt;&#xA;&#xA;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&#xA;&#xA;&amp;#34;&amp;#34;&amp;#34;=&amp;gt;文字处理&amp;lt;=&amp;#34;&amp;#34;&amp;#34;&#xA;&#xA;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&#xA;&#xA;&amp;#34;使用空格来替换Tab&amp;#34;&#xA;&#xA;set expandtab&#xA;&#xA;&amp;#34;设置所有的Tab和缩进为4个空格&amp;#34;&#xA;&#xA;set tabstop=4&#xA;&#xA;&amp;#34;设定&amp;lt;&amp;lt;和&amp;gt;&amp;gt;命令移动时的宽度为4&amp;#34;&#xA;&#xA;set shiftwidth=4&#xA;&#xA;&amp;#34;使得按退格键时可以一次删除4个空格&amp;#34;&#xA;&#xA;set softtabstop=4&#xA;&#xA;set smarttab&#xA;&#xA;&amp;#34;缩进，自动缩进（继承前一行的缩进）&amp;#34;&#xA;&#xA;&amp;#34;set autoindent 命令打开自动缩进，是下面配置的缩写&#xA;&#xA;&amp;#34;可使用autoindent命令的简写，即“:set ai”和“:set noai”&#xA;&#xA;&amp;#34;还可以使用“:set ai sw=4”在一个命令中打开缩进并设置缩进级别&#xA;&#xA;set ai&#xA;&#xA;set cindent&#xA;&#xA;&amp;#34;智能缩进&amp;#34;&#xA;&#xA;set si&#xA;&#xA;&amp;#34;自动换行”&#xA;&#xA;set wrap&#xA;&#xA;&amp;#34;设置软宽度&amp;#34;&#xA;&#xA;set sw=4&#xA;&#xA;&amp;#34;行内替换&amp;#34;&#xA;&#xA;set gdefault&#xA;&#xA;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&#xA;&#xA;&amp;#34;&amp;#34;&amp;#34;=&amp;gt;Vim 界面&amp;lt;=&amp;#34;&amp;#34;&amp;#34;&#xA;&#xA;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&#xA;&#xA;&amp;#34;增强模式中的命令行自动完成操作&amp;#34;&#xA;&#xA;set wildmenu&#xA;&#xA;&amp;#34;显示标尺&amp;#34;&#xA;&#xA;set ruler&#xA;&#xA;&amp;#34;设置命令行的高度&amp;#34;&#xA;&#xA;set cmdheight=1&#xA;&#xA;&amp;#34;显示行数&amp;#34;&#xA;&#xA;set nu&#xA;&#xA;&amp;#34;不要图形按钮&amp;#34;&#xA;&#xA;set go=&#xA;&#xA;&amp;#34;在执行宏命令时，不进行显示重绘；在宏命令执行完成后，一次性重绘，以便提高性能&amp;#34;&#xA;&#xA;set lz&#xA;&#xA;&amp;#34;使回格键（backspace）正常处理indent, eol, start等&amp;#34;&#xA;&#xA;set backspace=eol,start,indent&#xA;&#xA;&amp;#34;允许空格键和光标键跨越行边界&amp;#34;&#xA;&#xA;set whichwrap+=&amp;lt;,&amp;gt;,h,l&#xA;&#xA;&amp;#34;设置魔术&amp;#34;&#xA;&#xA;set magic&#xA;&#xA;&amp;#34;关闭遇到错误时的声音提示&amp;#34;&#xA;&#xA;&amp;#34;关闭错误信息响铃&amp;#34;&#xA;&#xA;set noerrorbells&#xA;&#xA;&amp;#34;关闭使用可视响铃代替呼叫&amp;#34;&#xA;&#xA;set novisualbell&#xA;&#xA;&amp;#34;高亮显示匹配的括号([{和}])&amp;#34;&#xA;&#xA;set showmatch&#xA;&#xA;&amp;#34;匹配括号高亮的时间（单位是十分之一秒）&amp;#34;&#xA;&#xA;set mat=2&#xA;&#xA;&amp;#34;光标移动到buffer的顶部和底部时保持3行距离&amp;#34;&#xA;&#xA;set scrolloff=3&#xA;&#xA;&amp;#34;搜索逐字符高亮&amp;#34;&#xA;&#xA;set hlsearch&#xA;&#xA;set incsearch&#xA;&#xA;&amp;#34;搜索时不区分大小写&amp;#34;&#xA;&#xA;&amp;#34;还可以使用简写（“:set ic”和“:set noic”）&amp;#34;&#xA;&#xA;set ignorecase&#xA;&#xA;&amp;#34;用浅色高亮显示当前行&amp;#34;&#xA;&#xA;autocmd InsertLeave * se nocul&#xA;&#xA;autocmd InsertEnter * se cul&#xA;&#xA;&amp;#34;输入的命令显示出来，看的清楚&amp;#34;&#xA;&#xA;set showcmd&#xA;&#xA;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&#xA;&#xA;&amp;#34;&amp;#34;&amp;#34;=&amp;gt;编码设置&amp;lt;=&amp;#34;&amp;#34;&amp;#34;&#xA;&#xA;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&#xA;&#xA;&amp;#34;设置编码&amp;#34;&#xA;&#xA;set encoding=utf-8&#xA;&#xA;set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936&#xA;&#xA;&amp;#34;设置文件编码&amp;#34;&#xA;&#xA;set fileencodings=utf-8,gbk,latin1&#xA;&#xA;&amp;#34;设置终端编码&amp;#34;&#xA;&#xA;set termencoding=utf-8&#xA;&#xA;&amp;#34;设置语言编码&amp;#34;&#xA;&#xA;set langmenu=zh_CN.UTF-8&#xA;&#xA;set helplang=cn&#xA;&#xA;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&#xA;&#xA;&amp;#34;&amp;#34;&amp;#34;=&amp;gt;其他设置&amp;lt;=&amp;#34;&amp;#34;&amp;#34;&#xA;&#xA;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&#xA;&#xA;&amp;#34;开启新行时使用智能自动缩进&amp;#34;&#xA;&#xA;set smartindent&#xA;&#xA;set cin&#xA;&#xA;set showmatch&#xA;&#xA;&amp;#34;在处理未保存或只读文件的时候，弹出确认&amp;#34;&#xA;&#xA;set confirm&#xA;&#xA;&amp;#34;隐藏工具栏&amp;#34;&#xA;&#xA;set guioptions-=T&#xA;&#xA;&amp;#34;隐藏菜单栏&amp;#34;&#xA;&#xA;set guioptions-=m&#xA;&#xA;&amp;#34;置空错误铃声的终端代码&amp;#34;&#xA;&#xA;set vb t_vb=&#xA;&#xA;&amp;#34;显示状态栏（默认值为1，表示无法显示状态栏）&amp;#34;&#xA;&#xA;set laststatus=2&#xA;&#xA;&amp;#34;状态行显示的内容&amp;#34;&#xA;&#xA;set statusline=%F%m%r%h%w\ [FORMAT=%{&amp;amp;ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\&amp;#34;%d/%m/%y\ -\ %H:%M\&amp;#34;)}&#xA;&#xA;&amp;#34;粘贴不换行问题的解决方法&amp;#34;&#xA;&#xA;set pastetoggle=&amp;lt;F9&amp;gt;&#xA;&#xA;&amp;#34;设置背景颜色&amp;#34;&#xA;&#xA;set background=dark&#xA;&#xA;&amp;#34;文件类型自动检测，代码智能补全&amp;#34;&#xA;&#xA;set completeopt=longest,preview,menu&#xA;&#xA;&amp;#34;共享剪切板&amp;#34;&#xA;&#xA;set clipboard+=unnamed&#xA;&#xA;&amp;#34;从不备份&amp;#34;&#xA;&#xA;set nobackup&#xA;&#xA;set noswapfile&#xA;&#xA;&amp;#34;自动保存&amp;#34;&#xA;&#xA;set autowrite&#xA;&#xA;&amp;#34;显示中文帮助&amp;#34;&#xA;&#xA;if version &amp;gt;= 603&#xA;&#xA;        set helplang=cn&#xA;&#xA;            set encoding=utf-8&#xA;&#xA;endif&#xA;&#xA;&amp;#34;设置高亮相关项&amp;#34;&#xA;&#xA;highlight Search ctermbg=black ctermfg=white guifg=white guibg=black&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>C/S_B/S 架构</title>
      <link>https://vcvvvc.github.io/post/cs_bs/</link>
      <pubDate>Mon, 05 Oct 2020 16:14:49 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/cs_bs/</guid>
      <description>&lt;p&gt;&lt;strong&gt;什么是C/S和B/S架构？&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;C/S架构&#xA;软件（即客户机/服务器模式）分为客户机和服务器两层：第一层是在客户机系统上结合了表示与业务逻辑，第二层是通过网络结合了数据库服务器。&#xA;简单的说就是第一层是用户表示层，第二层是数据库层。&#xA;客户端和服务器直接相连，这两个组成部分都承担着重要的角色。&lt;/p&gt;&#xA;&lt;p&gt;B/S架构&#xA;第一层是浏览器（即客户端）只有简单的输入输出功能，处理极少部分的事务逻辑。由于客户不需要安装客户端，只要有浏览器就能上网浏览，所以它面向的是大范围的用户，所以界面设计得比较简单，通用。&lt;/p&gt;&#xA;&lt;p&gt;第二层是WEB服务器，扮演着信息传送的角色。当用户想要访问数据库时，就会首先向WEB服务器发送请求，WEB服务器统一请求后会向数据库服务器发送访问数据库的请求，这个请求是以SQL语句实现的。&lt;/p&gt;&#xA;&lt;p&gt;第三层是数据库服务器，它存放着大量的数据。当数据库服务器收到了WEB服务器的请求后，会对SQL语句进行处理，并将返回的结果发送给WEB服务器，接下来，WEB服务器将收到的数据结果转换为HTML文本形式发送给浏览器。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;优点缺点&#34;&gt;优点/缺点&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;C/S架构的优点&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;a. 客户端和服务器直接相连。点对点的连接方式更安全，可以直接操作本地文本，比较方便。&lt;/p&gt;&#xA;&lt;p&gt;b. 客户端可以处理一些逻辑事务。可以进行数据处理和数据存储，提供一定的帮助。&lt;/p&gt;&#xA;&lt;p&gt;c. 客户端直接操作界面。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;C/S架构的缺点&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;a&amp;gt; C/S架构适用于局域网，对网速的要求比较高。&lt;/p&gt;&#xA;&lt;p&gt;b&amp;gt; 客户端界面缺乏通用性，且当业务更改时就需要更改界面，重新编写。&lt;/p&gt;&#xA;&lt;p&gt;c&amp;gt; 随着用户数量的增多，会出现通信拥堵、服务器响应速度慢等情况。&lt;/p&gt;&#xA;&lt;p&gt;d&amp;gt; 系统的维护也比较麻烦。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/bscs/c_s.png&#34; alt=&#34;cs_bs&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;B/S架构的优点&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;a&amp;gt; 浏览器和数据库服务器采用多对多的方式连接。因此适合在广域网里实现巨大的互联网，甚至是全球网，有着很强大的信息共享性。&lt;/p&gt;&#xA;&lt;p&gt;b&amp;gt; 浏览器只处理一些简单的逻辑事务，负担小。&lt;/p&gt;&#xA;&lt;p&gt;c&amp;gt; 数据都集中存放在数据库服务器，所以不存在数据不一致现象。&lt;/p&gt;&#xA;&lt;p&gt;d&amp;gt; 随着服务器负载的增加，可以平滑地增加服务器的个数并建立集群服务器系统，然后在各个服务器之间做负载均衡。&lt;/p&gt;&#xA;&lt;p&gt;e&amp;gt; B/S建立在广域网上，所以需要的网速要求不高。&lt;/p&gt;&#xA;&lt;p&gt;f&amp;gt; 不需要安装客户端，只要能连上网，就能随时随地的浏览页面。&lt;/p&gt;&#xA;&lt;p&gt;g&amp;gt; 能有效地保护数据平台和管理访问权限，确保服务器数据库的数据安全。&lt;/p&gt;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;B/S架构的缺点&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;a&amp;gt; 服务器承担着重要的责任，数据负荷较重。一旦发生服务器“崩溃”等问题，后果不堪设想。&lt;/p&gt;&#xA;&lt;p&gt;b&amp;gt; 页面需要不断地动态刷新，当用户增多时，网速会变慢。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/bscs/1.png&#34; alt=&#34;1.png&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;第一层是浏览器（即客户端）只有简单的输入输出功能，处理极少部分的事务逻辑。由于客户不需要安装客户端，只要有浏览器就能上网浏览，所以它面向的是大范围的用户，所以界面设计得比较简单，通用。&lt;/li&gt;&#xA;&lt;li&gt;第二层是WEB服务器，扮演着信息传送的角色。当用户想要访问数据库时，就会首先向WEB服务器发送请求，WEB服务器统一请求后会向数据库服务器发送访问数据库的请求，这个请求是以SQL语句实现的。&lt;/li&gt;&#xA;&lt;li&gt;第三层是数据库服务器，它存放着大量的数据。当数据库服务器收到了WEB服务器的请求后，会对SQL语句进行处理，并将返回的结果发送给WEB服务器，接下来，WEB服务器将收到的数据结果转换为HTML文本形式发送给浏览器。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_42828949/article/details/82822901&#34;&gt;https://blog.csdn.net/qq_42828949/article/details/82822901&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/zhengqijun_/article/details/53056624&#34;&gt;https://blog.csdn.net/zhengqijun_/article/details/53056624&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux Pthread</title>
      <link>https://vcvvvc.github.io/post/pthread/</link>
      <pubDate>Sun, 27 Sep 2020 17:53:48 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/pthread/</guid>
      <description>&lt;p&gt;&lt;code&gt;int pthread_cond_init(pthread_cond_t *cond, pthread_condattr_t *cond_attr)&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;其中cond是一个指向结构pthread_cond_t的指针，cond_attr是一个指向结构pthread_condattr_t的指针。结构 pthread_condattr_t是条件变量的属性结构，和互斥锁一样我们可以用它来设置条件变量是进程内可用还是进程间可用，&lt;/strong&gt;&#xA;&lt;strong&gt;默认值是&lt;/strong&gt;&lt;code&gt;PTHREAD_ PROCESS_PRIVATE&lt;/code&gt;，&lt;strong&gt;即此条件变量被同一进程内的各个线程使用。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;注意初始化条件变量只有未被使用时才能重新初始化或被释放。释放一个条件变量的函数为pthread_cond_destroy（pthread_cond_t cond）。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;也可以静态的初始化条件变量&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pthread_cond_t my_condition = PTHREAD_COND_INITIALIZER;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pthread_mutex_init(pthread_mutex_t * mutex, const pthread_mutexattr_t *attr);&#xA;// 初始化锁变量mutex。&#xA;// attr为锁属性，NULL值为默认属性。&#xA;&#xA;pthread_mutex_lock(pthread_mutex_t *mutex);&#xA;// 加锁（阻塞操作）&#xA;&#xA;pthread_mutex_trylock(pthread_mutex_t *mutex);&#xA;// 试图加锁（不阻塞操作）&#xA;// 当互斥锁空闲时将占有该锁；否则立即返回&#xA;// 但是与2不一样的是当锁已经在使用的时候，返回为EBUSY，而不是挂起等待。&#xA;&#xA;pthread_mutex_unlock(pthread_mutex_t *mutex);&#xA;释放锁&#xA;&#xA;pthread_mutex_destroy(pthread_mutex_t *mutex);&#xA;销毁一个不再需要的互斥量，释放系统资源。&#xA;&#xA;pthread_cond_wait() / pthread_cond_timedwait -----等待条件变量，挂起线程，区别是后者，会有timeout时间，&#xA;如果到了timeout,线程自动解除阻塞，这个时间和 time()系统调用相同意义的。以1970年时间算起。&#xA;&#xA;pthread_cond_signal ----激活等待列表中的线程，&#xA;&#xA;pthread_cond_broadcast() -------激活所有等待线程列表中最先入队的线程&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;条件变量&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;条件变量是利用线程间共享的全局变量进行同步的一种机制，主要包括两个动作：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;1）一个线程等待&amp;quot;条件变量的条件成立&amp;quot;而挂起；&lt;/li&gt;&#xA;&lt;li&gt;2）另一个线程使&amp;quot;条件成立&amp;quot;（给出条件成立信号）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;为了防止竞争，条件变量的使用总是和一个互斥锁结合在一起。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;注意：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;1）上面这几个函数都是原子操作，可以为理解为一条指令，不会被其他程序打断&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;2）上面这个几个函数，必须配合使用。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;3）pthread_cond_wait，先会解除当前线程的互斥锁，然后挂线线程，等待条件变量满足条件。一旦条件变量满足条件，则会给线程上锁，继续执行pthread_cond_wait&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;返回值:&lt;/p&gt;&#xA;&lt;p&gt;pthread_mutex_lock() 和 pthread_mutex_unlock() 返回0，否则返回一个错误的提示码&lt;/p&gt;&#xA;&lt;p&gt;pthread_mutex_trylock() 在成功获得了一个mutex的锁后返回0，否则返回一个错误提示码错误&lt;/p&gt;&#xA;&lt;p&gt;pthread_mutex_lock() 和 pthread_mutex_unlock()失败的时候 [EINVAL] mutex在生成的时候，它的protocol属性的值是 PTHREAD_PRIO_PROTECT，同时调用线程的优先级(priority)比该mutex的当前prority上限高&lt;/p&gt;</description>
    </item>
    <item>
      <title>CPP_Mysql_use</title>
      <link>https://vcvvvc.github.io/post/mysql_use/</link>
      <pubDate>Fri, 25 Sep 2020 16:40:02 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/mysql_use/</guid>
      <description>&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Mysql&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;ex&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;mysql_init()&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;获取或初始化MYSQL结构&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;mysql_real_connect()&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;连接到MySQL服务器。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;mysql_query()&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;执行指定为“以Null终结的字符串”的SQL查询&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;mysql_use_result()&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;初始化逐行的结果集检索&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;mysql_field_count()&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;返回上次执行语句的结果集的列数&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;mysql_fetch_row()&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;从结果集中获取下一行&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;mysql_num_fields()&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;返回结果集中的字段数&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class MyDB&#xA;{&#xA;public:&#xA;&#x9;MyDB();&#xA;&#x9;~MyDB();&#xA;&#x9;bool initDB(string host, string user, string pwd, string db_name);&#xA;&#x9;bool exeSQL(string sql);&#xA;private:&#xA;&#x9;MYSQL *connection;&#xA;&#x9;MYSQL_RES *result;&#xA;&#x9;MYSQL_ROW row;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;基本步骤&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;使用mysql_init()初始化连接&#xA;使用mysql_real_connect()建立一个到mysql数据库的连接&#xA;使用mysql_query()执行查询语句&#xA;result = mysql_use_result(conn)获取结果集&#xA;mysql_field_count(conn)获取查询的列数，mysql_num_fields(result)获取结果集的字段数&#xA;通过mysql_fetch_row(result)不断获取下一行，然后循环输出&#xA;释放结果集所占内存mysql_free_result(result)&#xA;mysql_close(conn)关闭连接&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;p&gt;Re:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/lisonglisonglisong/article/details/25071793&#34;&gt;https://blog.csdn.net/lisonglisonglisong/article/details/25071793&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Centos7 Install mongodb</title>
      <link>https://vcvvvc.github.io/post/install_mongodb/</link>
      <pubDate>Mon, 21 Sep 2020 13:44:35 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/install_mongodb/</guid>
      <description>&lt;h1 id=&#34;configure-the-package-management-system-yum&#34;&gt;Configure the package management system (yum)&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;vim /etc/yum.repos.d/mongodb-org-4.4.repo&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[mongodb-org-4.4]&#xA;name=MongoDB Repository&#xA;baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/4.4/x86_64/&#xA;gpgcheck=1&#xA;enabled=1&#xA;gpgkey=https://www.mongodb.org/static/pgp/server-4.4.asc&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h1 id=&#34;install-mongodb&#34;&gt;Install Mongodb&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo yum install -y mongodb-org&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h1 id=&#34;directory-paths&#34;&gt;Directory Paths&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo mkdir -p /var/lib/mongo&#xA;sudo mkdir -p /var/log/mongodb&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo chown -R mongod:mongod /var/lib/mongo&#xA;sudo chown -R mongod:mongod /var/log/mongodb&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;start-mongodb&#34;&gt;Start mongodb&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo systemctl start mongod&#xA;sudo systemctl status mongod&#xA;sudo systemctl enable mongod&#xA;mongo //use&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;p&gt;Re:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/&#34;&gt;https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Centos7 Install_redis</title>
      <link>https://vcvvvc.github.io/post/install_redis/</link>
      <pubDate>Mon, 21 Sep 2020 13:32:22 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/install_redis/</guid>
      <description>&lt;h1 id=&#34;升级gcc&#34;&gt;升级GCC&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;yum -y install centos-release-scl&#xA;yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils&#xA;scl enable devtoolset-9 bash&#xA;echo &amp;#34;source /opt/rh/devtoolset-9/enable&amp;#34; &amp;gt;&amp;gt; /etc/profile&#xA;gcc -v&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h1 id=&#34;安装redis&#34;&gt;安装redis&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;wget http://download.redis.io/releases/redis-6.0.8.tar.gz&#xA;tar -xvf redis-6.0.8/tar/gz&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd redis&#xA;make -j4&#xA;make install PREFIX=/usr/local/redis&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h1 id=&#34;配置redis&#34;&gt;配置redis&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd redis&#xA;cp redis.conf /usr/local/redis/bin/&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;vim /usr/local/redis/bin/redis.conf&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;daemonize no 改为 daemonize yes&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h1 id=&#34;开机自启&#34;&gt;开机自启&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;vim /etc/systemd/system/redis.service&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[Unit]&#xA;Description=redis-server&#xA;After=network.target&#xA;&#xA;[Service]&#xA;Type=forking&#xA;ExecStart=/usr/local/redis/bin/redis-server /usr/local/redis/bin/redis.conf&#xA;PrivateTmp=true&#xA;&#xA;[Install]&#xA;WantedBy=multi-user.target&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;systemctl daemon-reload&#xA;ln -s /usr/local/redis/bin/redis-cli /usr/bin/redis&#xA;systemctl start redis.service&#xA;systemctl enable redis.service&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;p&gt;Re:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Centos7 Install mysql</title>
      <link>https://vcvvvc.github.io/post/install_mysql/</link>
      <pubDate>Sun, 20 Sep 2020 22:36:44 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/install_mysql/</guid>
      <description>&lt;h1 id=&#34;1添加mysql57仓库&#34;&gt;1.添加Mysql5.7仓库&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;sudo rpm -ivh https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;2确认mysql仓库成功添加&#34;&gt;2.确认Mysql仓库成功添加&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;sudo yum repolist all | grep mysql | grep enabled&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;3安装mysql57&#34;&gt;3.安装Mysql5.7&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;sudo yum -y install mysql-community-server&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;4启动mysql&#34;&gt;4.启动Mysql&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;sudo systemctl start mysqld&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;5设置系统启动时自动启动&#34;&gt;5.设置系统启动时自动启动&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;sudo systemctl enable mysqld&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;6查看启动状态&#34;&gt;6.查看启动状态&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;sudo systemctl status mysqld&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;7root-密码&#34;&gt;7.root 密码&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;cat /var/log/mysqld.log | grep -i &#39;temporary password&#39;&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;8执行下面命令进行安全设置&#34;&gt;8.执行下面命令进行安全设置&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;这个命令会进行设置root密码设置，移除匿名用户，禁止root用户远程连接等&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;mysql_secure_installation&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;9设置数据库编码为utf8&#34;&gt;9.设置数据库编码为utf8&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;sudo vim /etc/my.cnf&lt;/code&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[client]&#xA;default-character-set=utf8&#xA;&#xA;[mysql]&#xA;default-character-set=utf8&#xA;&#xA;[mysqld]&#xA;collation-server = utf8_unicode_ci&#xA;init-connect=&amp;#39;SET NAMES utf8&amp;#39;&#xA;character-set-server = utf8&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;reboot&#34;&gt;reboot&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;sudo systemctl restart mysqld&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mysql_use</title>
      <link>https://vcvvvc.github.io/post/mysqluse/</link>
      <pubDate>Sat, 19 Sep 2020 12:08:34 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/mysqluse/</guid>
      <description>&lt;p&gt;&lt;strong&gt;创建数据库&lt;/strong&gt;&#xA;&lt;code&gt;CREATE DATABASE IF NOT EXISTS vctest DEFAULT CHARSET utf8 COLLATE utf8_general_ci;&lt;/code&gt;&#xA;&lt;code&gt;2. CREATE DATABASE IF NOT EXISTS mytestdb;&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;删除数据库&lt;/strong&gt;&#xA;&lt;code&gt;drop database test1;&lt;/code&gt;&#xA;&lt;code&gt;2. DROP DATABASE IF EXISTS mytestdb;&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;查看All DB&lt;/strong&gt;&#xA;&lt;code&gt;show databases;&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;导入sql&lt;/strong&gt;&#xA;&lt;code&gt;source test.sql&lt;/code&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;select&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;use vctest&#xA;select city, phone, country from `offices`;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;SELECT语句由以下列表中所述的几个子句组成：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;语句中的SELECT和FROM语句是必须的，其他部分是可选的。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;SELECT之后是逗号分隔列或星号(*)的列表，表示要返回所有列。&lt;/li&gt;&#xA;&lt;li&gt;FROM指定要查询数据的表或视图。&lt;/li&gt;&#xA;&lt;li&gt;JOIN根据某些连接条件从其他表中获取数据。&lt;/li&gt;&#xA;&lt;li&gt;WHERE过滤结果集中的行。&lt;/li&gt;&#xA;&lt;li&gt;GROUP BY将一组行组合成小分组，并对每个小分组应用聚合函数。&lt;/li&gt;&#xA;&lt;li&gt;HAVING过滤器基于GROUP BY子句定义的小分组。&lt;/li&gt;&#xA;&lt;li&gt;ORDER BY指定用于排序的列的列表。&lt;/li&gt;&#xA;&lt;li&gt;LIMIT限制返回行的数量。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;即使WHERE子句出现在语句的末尾，但MySQL会首先使用WHERE子句中的表达式来选择匹配的行。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;SELECT&#xA;    lastname, firstname, jobtitle&#xA;FROM&#xA;    employees&#xA;WHERE&#xA;    jobtitle = &amp;#39;Sales Rep&amp;#39;;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;INSERT 创建表&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Socket struct</title>
      <link>https://vcvvvc.github.io/post/socket_struct/</link>
      <pubDate>Sun, 13 Sep 2020 17:03:43 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/socket_struct/</guid>
      <description>&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;struct sockaddr {&#xA;    unsigned short sa_family; /* address family, AF_xxx */&#xA;    char sa_data[14]; /* 14 bytes of protocol address */&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;此数据结构用做bind、connect、recvfrom、sendto等函数的参数，指明地址信息。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;但一般编程中并不直接针对此数据结构操作，而是使用另一个与sockaddr等价的数据结构sockaddr_in（在netinet/in.h中定义）：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;struct sockaddr_in {&#xA;    short int sin_family; /* Address family */&#xA;    unsigned short int sin_port; /* Port number */&#xA;    struct in_addr sin_addr; /* Internet address */&#xA;    unsigned char sin_zero[8]; /* Same size as struct sockaddr */&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;在编程中大多数是使用sockaddr_in这个结构来设置/获取地址信息&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;sin_family指代协议族，在socket编程中只能是AF_INET&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;sin_port存储端口号（使用网络字节顺序）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;sin_addr存储IP地址，使用in_addr这个数据结构&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;struct in_addr {&#xA;    unsigned long s_addr;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;这个数据结构是由于历史原因保留下来的，主要用作与以前的格式兼容。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;s_addr按照网络字节顺序存储IP地址&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;sin_zero是为了让sockaddr与sockaddr_in两个数据结构保持大小相同而保留的空字节&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Socket file</title>
      <link>https://vcvvvc.github.io/post/socket_file/</link>
      <pubDate>Sun, 13 Sep 2020 16:43:04 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/socket_file/</guid>
      <description>&lt;p&gt;&lt;strong&gt;socket编程中需要用到的头文件&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;sys/types.h：数据类型定义&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;sys/socket.h：提供socket函数及数据结构&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;netinet/in.h：定义数据结构sockaddr_in&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;arpa/inet.h：提供IP地址转换函数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;netdb.h：提供设置及获取域名的函数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;sys/ioctl.h：提供对I/O控制的函数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;sys/poll.h：提供socket等待测试机制的函数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;其他在网络程序中常见的头文件&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;unistd.h：提供通用的文件、目录、程序及进程操作的函数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;errno.h：提供错误号errno的定义，用于错误处理&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;fcntl.h：提供对文件控制的函数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;time.h：提供有关时间的函数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;crypt.h：提供使用DES加密算法的加密函数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;pwd.h：提供对/etc/passwd文件访问的函数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;shadow.h：提供对/etc/shadow文件访问的函数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;pthread.h：提供多线程操作的函数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;signal.h：提供对信号操作的函数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;sys/wait.h、sys/ipc.h、sys/shm.h：提供进程等待、进程间通讯（IPC）及共享内存的函数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;建议：在编写网络程序时，可以直接使用下面这段头文件代码&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;unistd.h&amp;gt;&#xA;#include &amp;lt;sys/types.h&amp;gt;&#xA;#include &amp;lt;sys/socket.h&amp;gt;&#xA;#include &amp;lt;netdb.h&amp;gt;&#xA;#include &amp;lt;stdio.h&amp;gt;&#xA;#include &amp;lt;stdlib.h&amp;gt;&#xA;#include &amp;lt;string.h&amp;gt;&#xA;#include &amp;lt;ctype.h&amp;gt;&#xA;#include &amp;lt;errno.h&amp;gt;&#xA;#include &amp;lt;malloc.h&amp;gt;&#xA;#include &amp;lt;netinet/in.h&amp;gt;&#xA;#include &amp;lt;arpa/inet.h&amp;gt;&#xA;#include &amp;lt;sys/ioctl.h&amp;gt;&#xA;#include &amp;lt;stdarg.h&amp;gt;&#xA;#include &amp;lt;fcntl.h&amp;gt;&#xA;#include &amp;lt;fcntl.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;p&gt;涉及到用户权限及密码验证问题时加入如下语句：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;shadow.h&amp;gt;&#xA;#include &amp;lt;crypt.h&amp;gt;&#xA;#include &amp;lt;pwd.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;需要注意的是，应该在编译时链接加密算法库，即增加编译选项：-lcrypt&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;涉及到文件及时间操作加入如下语句&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;sys/time.h&amp;gt;&#xA;#include &amp;lt;utime.h&amp;gt;&#xA;#include &amp;lt;time.h&amp;gt;&#xA;#include &amp;lt;sys/stat.h&amp;gt;&#xA;#include &amp;lt;sys/file.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;涉及到多进程操作时加入如下语句&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cpp exception class</title>
      <link>https://vcvvvc.github.io/post/cpp_exception/</link>
      <pubDate>Sun, 13 Sep 2020 15:13:08 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/cpp_exception/</guid>
      <description>&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class exception{&#xA;public:&#xA;    exception () throw();  //构造函数&#xA;    exception (const exception&amp;amp;) throw();  //拷贝构造函数&#xA;    exception&amp;amp; operator= (const exception&amp;amp;) throw();  //运算符重载&#xA;    virtual ~exception() throw();  //虚析构函数&#xA;    virtual const char* what() const throw();  //虚函数&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;what() 函数返回一个能识别异常的字符串，正如它的名字“what”一样，可以粗略地告诉你这是什么异常。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;exception-类的继承层次&#34;&gt;exception 类的继承层次:&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/cpp_exception/exception1.jpg&#34; alt=&#34;exception&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;exception-类&#34;&gt;exception 类&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;直接派生类&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;exceptopn&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;explain&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;login_error&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;logic error&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;runtime_error&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;运行时错误&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;bad_alloc&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;使用 new 或 new[] 分配内存失败时抛出的异常&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;bad_typeid&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;使用 typeid 操作一个 NULL 指针，而且该指针是带有虚函数的类，这时抛出 bad_typeid 异常&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;bad_cast&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;使用 dynamic_cast 转换失败时抛出的异常&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;ios_base::failure&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;io 过程中出现的异常&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;bad_exception&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;这是个特殊的异常，如果函数的异常列表里声明了 bad_exception 异常，当函数内部抛出了异常列表中没有的异常时，如果调用的 unexpected() 函数中抛出了异常，不论什么类型，都会被替换为 bad_exception 类型&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;logic_error 的派生类&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux cpp put Backtrace</title>
      <link>https://vcvvvc.github.io/post/backtrace/</link>
      <pubDate>Wed, 02 Sep 2020 14:10:18 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/backtrace/</guid>
      <description>&lt;h1 id=&#34;获取backtrace&#34;&gt;获取Backtrace&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;execinfo.h&amp;gt;&#xA;&#xA;/* Store up to SIZE return address of the current program state in&#xA;   ARRAY and return the exact number of values stored.  */&#xA;int backtrace(void **array, int size);&#xA;&#xA;/* Return names of functions from the backtrace list in ARRAY in a newly&#xA;   malloc()ed memory block.  */&#xA;char **backtrace_symbols(void *const *array, int size);&#xA;&#xA;/* This function is similar to backtrace_symbols() but it writes the result&#xA;   immediately to a file.  */&#xA;void backtrace_symbols_fd(void *const *array, int size, int fd);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;int backtrace(void **buffer,int size)&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>epoll use</title>
      <link>https://vcvvvc.github.io/post/epoll_use/</link>
      <pubDate>Thu, 27 Aug 2020 12:09:01 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/epoll_use/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;#include &amp;lt;sys/epoll.h&amp;gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;epoll与select&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Epoll 没有最大并发连接的限制，上限是最大可以打开文件的数目&#xA;效率提升，epoll对于句柄事件的选择不是遍历的，是事件响应的，就是句柄上事件来就马上选择出来，不需要遍历整个句柄链表，因此效率非常高，内核将句柄用红黑树保存的，IO效率不随FD数目增加而线性下降。&#xA;内存拷贝， select让内核把 FD 消息通知给用户空间的时候使用了内存拷贝的方式，开销较大，但是Epoll 在这点上使用了共享内存的方式，这个内存拷贝也省略了。&#xA;相比于select，epoll最大的好处在于它不会随着监听fd数目的增长而降低效率。因为在内核中的select实现中，它是采用轮询来处理的，轮询的fd数目越多，自然耗时越多。&#xA;并且，在linux/posix_types.h头文件有这样的声明：&#xA;#define __FD_SETSIZE 1024&#xA;表示select最多同时监听1024个fd，当然，可以通过修改头文件再重编译内核来扩大这个数目，但这似乎并不治本。&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;epoll是Linux内核为处理大批量文件描述符而作了改进的poll，是Linux下多路复用IO接口select/poll的增强版本，它能显著提高程序在大量并发连接中只有少量活跃的情况下的系统CPU利用率。原因就是获取事件的时候，它无须遍历整个被侦听的描述符集，只要遍历那些被内核IO事件异步唤醒而加入Ready队列的描述符集合就行了。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;触发模式&#34;&gt;触发模式&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;epoll除了提供select/poll那种IO事件的水平触发（Level Triggered）外，还提供了边缘触发（Edge Triggered），这就使得用户空间程序有可能缓存IO状态，减少epoll_wait/epoll_pwait的调用，提高应用程序效率。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;水平触发（LT）：默认工作模式，即当epoll_wait检测到某描述符事件就绪并通知应用程序时，应用程序可以不立即处理该事件；下次调用epoll_wait时，会再次通知此事件&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;//LevelTriggered(LT) //缺省工作方式，即默认的工作方式,支持blocksocket和no_blocksocket，错误率比较小。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;边缘触发（ET）： 当epoll_wait检测到某描述符事件就绪并通知应用程序时，应用程序必须立即处理该事件。如果不处理，下次调用epoll_wait时，不会再次通知此事件。（直到你做了某些操作导致该描述符变成未就绪状态了，也就是说边缘触发只在状态由未就绪变为就绪时只通知一次）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;//Edge Triggered(ET) //高速工作方式，错误率比较大，只支持no_block socket (非阻塞socket)&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;假设现在对方发送了2k的数据，而我们先读取了1k，然后这时调用了epoll_wait，如果是边沿触发ET，那么这个fd变成就绪状态就会从epoll 队列移除，&#xA;则epoll_wait 会一直阻塞，忽略尚未读取的1k数据; 而如果是水平触发LT，那么epoll_wait 还会检测到可读事件而返回，我们可以继续读取剩下的1k 数据。&#xA;总结: LT模式可能触发的次数更多, 一旦触发的次数多, 也就意味着效率会下降; 但这样也不能就说LT模式就比ET模式效率更低&#xA;因为ET的使用对编程人员提出了更高更精细的要求,一旦使用者编程水平不够, 那ET模式还不如LT模式。&#xA;&#xA;ET模式仅当状态发生变化的时候才获得通知,这里所谓的状态的变化并不包括缓冲区中还有未处理的数据,&#xA;也就是说,如果要采用ET模式,需要一直read/write直到出错为止,很多人反映为什么采用ET模式只接收了一部分数据就再也得不到通知了,大多因为这样;&#xA;而LT模式是只要有数据没有处理就会一直通知下去的.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1-创建一个epoll的句柄&#34;&gt;1. 创建一个epoll的句柄&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int epoll_create(int size);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大。&lt;/p&gt;&#xA;&lt;p&gt;这个参数不同于select()中的第一个参数，给出最大监听的fd+1的值。需要注意的是，当创建好epoll句柄后，它就是会占用一个fd值，在linux下如果查看/proc/进程id/fd/，是能够看到这个fd的，所以在使用完epoll后，必须调用close()关闭，否则可能导致fd被耗尽。&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-将被监听的描述符添加到epoll句柄或从epool句柄中删除或者对监听事件进行修改&#34;&gt;2. 将被监听的描述符添加到epoll句柄或从epool句柄中删除或者对监听事件进行修改&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event); //op为注册事件&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;epoll的事件注册函数，它不同与select()是在监听事件时告诉内核要监听什么类型的事件，而是在这里先注册要监听的事件类型。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;用于控制某个epoll文件描述符上的事件，可以注册事件，修改事件，删除事件。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;EPOLL_CTL_ADD 注册新的fd到epfd中；&lt;/li&gt;&#xA;&lt;li&gt;EPOLL_CTL_MOD 修改已经注册的fd的监听事件；&lt;/li&gt;&#xA;&lt;li&gt;EPOLL_CTL_DEL 从epfd中删除一个fd；&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;3-等待事件触发当超过timeout还没有事件触发时就超时&#34;&gt;3. 等待事件触发，当超过timeout还没有事件触发时，就超时&lt;/h3&gt;&#xA;&lt;p&gt;int epoll_wait(int epfd, struct epoll_event * events, intmaxevents, int timeout);&lt;/p&gt;</description>
    </item>
    <item>
      <title>Socket function</title>
      <link>https://vcvvvc.github.io/post/socket/</link>
      <pubDate>Wed, 26 Aug 2020 22:47:24 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/socket/</guid>
      <description>&lt;p&gt;&lt;strong&gt;setsockopt&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;获取或者设置与某个套接字关联的选 项。选项可能存在于多层协议中，它们总会出现在最上面的套接字层。当操作套接字选项时，&#xA;&#xA;选项位于的层和选项的名称必须给出。为了操作套接字层的选项，应该 将层的值指定为SOL_SOCKET。为了操作其它层的选项，控制选&#xA;&#xA;项的合适协议号必须给出。例如，为了表示一个选项由TCP协议解析，层应该设定为协议 号TCP。&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/socket/1.png&#34; alt=&#34;option&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;SO_LINGER选项&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;struct linger&#xA;{&#xA;    int l_onoff;&#xA;    int l_linger;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;l_onoff = 0, 数据保持发送完成后立即返回&lt;/li&gt;&#xA;&lt;li&gt;l_onoff = 1, l_linger = 0, 立即放回 放弃发送, 发送rst 自身立即复位&lt;/li&gt;&#xA;&lt;li&gt;l_onoff = 1, l_linger = 1, 阻塞到超时或数据发送完成, 保持尝试发送,超时后立即结束&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;SO_REUSEADDR选项&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;改变了通配绑定时处理源地址冲突的处理方式, 让端口释放后立即就可以被再次使用&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;允许启动一个监听服务器并捆绑其众所周知端口，即使以前建立的将此端口用做他们的本地端口的连接仍存在&lt;/li&gt;&#xA;&lt;li&gt;允许在同一端口上启动同一服务器的多个实例，只要每个实例捆绑一个不同的本地IP地址即可&lt;/li&gt;&#xA;&lt;li&gt;允许单个进程捆绑同一端口到多个套接口上，只要每个捆绑指定不同的本地IP地址即可。一般不用于tco服务器&lt;/li&gt;&#xA;&lt;li&gt;允许完全重复的捆绑&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Re:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/my_life/articles/5174585.html&#34;&gt;https://www.cnblogs.com/my_life/articles/5174585.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/141aa1c41f15&#34;&gt;https://www.jianshu.com/p/141aa1c41f15&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/u010144805/article/details/78579528&#34;&gt;https://blog.csdn.net/u010144805/article/details/78579528&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int fcntl(int fd, int cmd);&#xA;int fcntl(int fd, int cmd, long arg);&#xA;int fcntl(int fd, int cmd, struct flock *lock);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;fcntl函数有5种功能：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;1.复制一个现有的描述符（cmd=F_DUPFD）.&lt;/li&gt;&#xA;&lt;li&gt;2.获得／设置文件描述符标记(cmd=F_GETFD或F_SETFD).&lt;/li&gt;&#xA;&lt;li&gt;3.获得／设置文件状态标记(cmd=F_GETFL或F_SETFL).&lt;/li&gt;&#xA;&lt;li&gt;4.获得／设置异步I/O所有权(cmd=F_GETOWN或F_SETOWN).&lt;/li&gt;&#xA;&lt;li&gt;5.获得／设置记录锁(cmd=F_GETLK,F_SETLK或F_SETLKW).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Re: &lt;a href=&#34;https://www.cnblogs.com/xuyh/p/3273082.html&#34;&gt;https://www.cnblogs.com/xuyh/p/3273082.html&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Makefile template</title>
      <link>https://vcvvvc.github.io/post/makefile_template/</link>
      <pubDate>Wed, 19 Aug 2020 10:21:09 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/makefile_template/</guid>
      <description>&lt;h1 id=&#34;v1&#34;&gt;V1&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&#xA;############ 交叉编译&#xA;CROSS_COMPILE=aarch64-himix100-linux-&#xA;CC=$(CROSS_COMPILE)g++&#xA;&#xA;# 当前路径&#xA;PWD := $(shell pwd)&#xA;&#xA;#库&#xA;LIB += -lpthread -lsqlite3&#xA;&#xA;#参数&#xA;CFLAG= -D_GNU_SOURCE -D__USE_XOPEN -g&#xA;&#xA;#.cpp源文件&#xA;SRCS=$(wildcard ./src/*.cpp)&#xA;&#xA;#头文件&#xA;INC=-I$(PWD)/include&#xA;&#xA;#中间文件&#xA;OBJS=$(SRCS:.cpp=.o)&#xA;&#xA;#二进制文件&#xA;BIN=maincpp&#xA;&#xA;#start，表示开始执行&#xA;start:$(OBJS)&#xA;&#x9;$(CC) -o $(BIN) $(OBJS) $(CFLAG) $(LIB)&#xA;&#xA;.cpp.o:&#xA;&#x9;$(CC) $(INC)  -o $@ -c $&amp;lt; $(CFLAB) $(LIB)&#xA;&#xA;.PHONY : clean&#xA;clean:&#xA;&#x9;rm -f ${BIN} ./src/*.o&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h1 id=&#34;v2&#34;&gt;V2&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Makefile&#xA;cc=gcc&#xA;&#xA;LDFLAGS=-lncurses&#xA;&#xA;SRCS := $(wildcard *.c)&#xA;TARGET := $(SRCS:%.c=%)&#xA;&#xA;$(TARGET):$(SRCS)&#xA;&#x9;$(cc) $(LDFLAGS) $(SRCS) -o $(TARGET)&#xA;&#xA;clean:&#xA;&#x9;rm $(TARGET)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_38184741/article/details/84450937&#34;&gt;Makefile 文件 -只有include和src文件夹&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Shell_command($!, $@...)</title>
      <link>https://vcvvvc.github.io/post/shell_commans/</link>
      <pubDate>Sat, 01 Aug 2020 21:31:50 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/shell_commans/</guid>
      <description>&lt;h1 id=&#34;startsh-1-2-3-4&#34;&gt;./start.sh 1 2 3 4&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;num: $# = 4&#xA;PID: $$ = 24133&#xA;sname: $0 = start.sh&#xA;first: $1 = 1&#xA;secont: $2 = 2&#xA;$@ = 1234 #value list&#xA;$* = 1234 #value&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;$* 1 2 3 4&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/shellcommand/$*.png&#34; alt=&#34;shell&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Arch Beautify desktop</title>
      <link>https://vcvvvc.github.io/post/arch_desktop/</link>
      <pubDate>Thu, 30 Jul 2020 18:04:47 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/arch_desktop/</guid>
      <description>&lt;h2 id=&#34;1-install-xorg&#34;&gt;1. install xorg&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;systemctl enable dhcpcd&#xA;pacman -S xorg-server xorg-xinit&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;install-tool&#34;&gt;install tool&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pacman -S zsh alacritty fctix fcitx-im fcitx-configtool i3 git &#xA;sh -c &amp;#34;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;#34;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;install-ttf&#34;&gt;install ttf&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pacman -S ttf-liberation&#xA;pacman -S adobe-source-han-sans-cn-fonts&#xA;pacman -S adobe-source-han-sans-tw-fonts&#xA;pacman -S adobe-source-han-sans-jp-fonts&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;add-user&#34;&gt;add user&lt;/h2&gt;&#xA;&lt;p&gt;这一步随意&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;useradd -m -g users -s /bin/zsh xxxx #添加xxxx用户，用户名你自定义&#xA;passwd xxxx #为xxxx用户设置密码&#xA;vim /etc/sudoers #编辑配置文件&#xA;在root ALL = (ALL) ALL下添加xxxx ALL = (ALL) ALL;输入:wq!强制保存退出vim&#xA;login new user&#xA;touch .zshrc&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;startx&#34;&gt;startx&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cp /etc/X11/xinit/xinitrc ~/.xinitrc&#xA;vim ~/.xinitrc&#xA;exec i3&#xA;reboot&#xA;startx&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;tool&#34;&gt;tool&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pacman -S compton  &#xA;pacman -S polybar&#xA;pacman -S rofi  feh #快捷程序启动 壁纸&#xA;#feh --randomize --bg-fill ~/Pictureso/DesktopBackground &#xA;pacman -S ntfs-3g                                            #识别NTFS格式的硬盘&#xA;pacman -S adobe-source-han-serif-cn-fonts wqy-zenhei         #安装几个开源中文字体 一般装上文泉驿就能解决大多wine应用中文方块的问题&#xA;pacman -S noto-fonts-cjk noto-fonts-emoji noto-fonts-extra   #安装谷歌开源字体及表情&#xA;pacman -S firefox chromium                                   #安装常用的火狐、谷歌浏览器&#xA;pacman -S ark                                                #与dolphin同用右键解压&#xA;pacman -S p7zip unrar unarchiver lzop lrzip                  #安装ark可选依赖&#xA;#pacman -S packagekit-qt5 packagekit appstream-qt appstream   #确保Discover(软件中心）可用 需重启&#xA;pacman -S gwenview                                           #图片查看器&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h1 id=&#34;pacmain--s-rofi&#34;&gt;pacmain -S rofi&lt;/h1&gt;&#xA;&lt;p&gt;vim ~/.config/i3/config&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vmware install Archlinux </title>
      <link>https://vcvvvc.github.io/post/arch_install/</link>
      <pubDate>Thu, 30 Jul 2020 16:43:47 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/arch_install/</guid>
      <description>&lt;h1 id=&#34;0-ready-work&#34;&gt;0. Ready work&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Test environment:&#xA;Vmware15.5.6pro&#xA;arch-2020-07.iso&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;准备最新景象&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;选择UEFI引导&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/arch_install/firmwaretype.png&#34; alt=&#34;UEFI&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;1-start&#34;&gt;1. Start&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ls /sys/firmware/efi/efivars&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;这条命令检测是否在EFI模式下&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;禁用 reflector&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;systemctl stop reflector.service&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;检查网络, ping qq.com&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Archwiki: Note: The installation image has systemd-networkd.service, systemd-resolved.service and iwd.service enabled by default. That will not be the case for the installed system.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Update systime&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;timedatectl set-ntp true&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h1 id=&#34;2-partition-the-disks&#34;&gt;2. Partition the disks&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cfdisk /dev/sda #choose gpt&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/arch_install/disk.png&#34; alt=&#34;disk&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Move to Write , enter, yes, last Quit .&lt;/strong&gt;&#xA;&lt;img src=&#34;https://vcvvvc.github.io/img/arch_install/wyqchoose.png&#34; alt=&#34;move&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;3-format-the-partitions&#34;&gt;3. Format the partitions&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;3.1 Format:&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux install Boost c&#43;&#43;</title>
      <link>https://vcvvvc.github.io/post/linux_install_boost/</link>
      <pubDate>Tue, 28 Jul 2020 13:09:01 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/linux_install_boost/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;Boost C++ is Cpp programming language that provides support for tasks and structures&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;download-source&#34;&gt;Download Source&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;https://dl.bintray.com/boostorg/release/1.73.0/source/boost_1_73_0.tar.gz&#xA;tar zxvf boost(解压)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h1 id=&#34;set-use-gcc&#34;&gt;Set use GCC&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd boost&#xA;./bootstrap.sh --with-libraries=all --with-toolset=gcc&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h1 id=&#34;compile--install-boost&#34;&gt;Compile &amp;amp; Install boost&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./b2 toolset=gcc&#xA;./b2 install --prefix=/usr&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h1 id=&#34;test-programming&#34;&gt;Test programming&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;boost/thread/thread.hpp&amp;gt; //boost thread&#xA;#include &amp;lt;iostream&amp;gt;&#xA;#include &amp;lt;cstdlib&amp;gt;&#xA;using namespace std;&#xA;&#xA;volatile bool isRuning = true;&#xA;&#xA;void func1()&#xA;{&#xA;    static int cnt1 = 0;&#xA;    while(isRuning)&#xA;    {&#xA;        cout &amp;lt;&amp;lt; &amp;#34;func1:&amp;#34; &amp;lt;&amp;lt; cnt1++ &amp;lt;&amp;lt; endl;&#xA;        sleep(1);&#xA;    }&#xA;}&#xA;&#xA;void func2()&#xA;{&#xA;    static int cnt2 = 0;&#xA;    while(isRuning)&#xA;    {&#xA;        cout &amp;lt;&amp;lt; &amp;#34;\tfunc2:&amp;#34; &amp;lt;&amp;lt; cnt2++ &amp;lt;&amp;lt; endl;&#xA;        sleep(2);&#xA;    }&#xA;}&#xA;&#xA;int main()&#xA;{&#xA;    boost::thread thread1(&amp;amp;func1);&#xA;    boost::thread thread2(&amp;amp;func2);&#xA;&#xA;    system(&amp;#34;read&amp;#34;);&#xA;    isRuning = false;&#xA;&#xA;    thread2.join();&#xA;    thread1.join();&#xA;    cout &amp;lt;&amp;lt; &amp;#34;exit&amp;#34; &amp;lt;&amp;lt; endl;&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;g++ main.cpp -g -o main -lboost_thread -lpthread&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu20 install FFmpeg</title>
      <link>https://vcvvvc.github.io/post/ffmpeg_install/</link>
      <pubDate>Mon, 27 Jul 2020 17:41:31 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/ffmpeg_install/</guid>
      <description>&lt;h2 id=&#34;start-download-ffmpeg&#34;&gt;Start &lt;a href=&#34;https://www.ffmpeg.org/download.html&#34;&gt;Download FFmpeg&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;install-tool&#34;&gt;Install tool&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;1. install yasm&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt-get install yasm&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;if not installed yasm, os will output &amp;ldquo;nasm/yasm not found or too old. Use &amp;ndash;disable-x86asm for a crippled build.&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;2. install SDL2&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.libsdl.org/release/SDL2-2.0.12.tar.gz&#34;&gt;SDL2-2.0.12(stable)&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;tar -xvf SDL2-2.0.12.tar.gz&#xA;cd SDL2-2.0.12&#xA;./configure&#xA;sudo make -j4&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h1 id=&#34;install-ffmpeg&#34;&gt;Install FFmpeg&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;1. git clone &lt;a href=&#34;https://git.ffmpeg.org/ffmpeg.git&#34;&gt;https://git.ffmpeg.org/ffmpeg.git&lt;/a&gt; ffmpeg&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd ffmpeg/&#xA;./configure&#xA;sudo make -j4&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h1 id=&#34;3-check&#34;&gt;3. Check&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ffmpeg -version&#xA;ffplay -version&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
