<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sokcet on VVVV</title>
    <link>https://vcvvvc.github.io/tags/sokcet/</link>
    <description>Recent content in Sokcet on VVVV</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 13 Sep 2020 17:03:43 +0800</lastBuildDate>
    <atom:link href="https://vcvvvc.github.io/tags/sokcet/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Socket struct</title>
      <link>https://vcvvvc.github.io/post/socket_struct/</link>
      <pubDate>Sun, 13 Sep 2020 17:03:43 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/socket_struct/</guid>
      <description>struct sockaddr { unsigned short sa_family; /* address family, AF_xxx */ char sa_data[14]; /* 14 bytes of protocol address */ }; 此数据结构用做bind、connect、recvfrom、sendto等函数的参数，指明地址信息。&#xA;但一般编程中并不直接针对此数据结构操作，而是使用另一个与sockaddr等价的数据结构sockaddr_in（在netinet/in.h中定义）：&#xA;struct sockaddr_in { short int sin_family; /* Address family */ unsigned short int sin_port; /* Port number */ struct in_addr sin_addr; /* Internet address */ unsigned char sin_zero[8]; /* Same size as struct sockaddr */ }; 在编程中大多数是使用sockaddr_in这个结构来设置/获取地址信息&#xA;sin_family指代协议族，在socket编程中只能是AF_INET&#xA;sin_port存储端口号（使用网络字节顺序）&#xA;sin_addr存储IP地址，使用in_addr这个数据结构&#xA;struct in_addr { unsigned long s_addr; }; 这个数据结构是由于历史原因保留下来的，主要用作与以前的格式兼容。</description>
    </item>
  </channel>
</rss>
