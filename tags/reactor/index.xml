<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reactor on VW Blog</title>
    <link>https://vcvvvc.github.io/tags/reactor/</link>
    <description>Recent content in Reactor on VW Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 31 Jan 2021 22:19:30 +0800</lastBuildDate>
    <atom:link href="https://vcvvvc.github.io/tags/reactor/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Server actor</title>
      <link>https://vcvvvc.github.io/post/server_actor/</link>
      <pubDate>Sun, 31 Jan 2021 22:19:30 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/server_actor/</guid>
      <description>&lt;p&gt;&lt;strong&gt;同步IO模型通常用于实现Reactor模式, 异步IO模型则用于实现Proactor模式。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;reactor&#34;&gt;Reactor&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;Reactor模式要求主线程（I/O处理单元，下同）只负责监听文件描述上是否有事件发生，有的话就立即将该事件通知工作线程（逻辑单元，下同）。除此之外，主线程不做任何其他实质性的工作。读写数据，接受新的连接，以及处理客户请求均在工作线程中完成。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Reactor工作流程∶&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主线程往 epoll内核事件表中注册 socket 上的读就绪事件。&lt;/li&gt;&#xA;&lt;li&gt;主线程调用epoll_wait 等待socket上有数据可读。&lt;/li&gt;&#xA;&lt;li&gt;当socket上有数据可读时，epoll_wait 通知主线程。主线程则将socket可读事件放入请求队列。&lt;/li&gt;&#xA;&lt;li&gt;睡眠在请求队列上的某个工作线程被唤醒，它从socket读取数据，并处理客户请求，然后往 epoll 内核事件表中注册该 socket 上的写就绪事件。&lt;/li&gt;&#xA;&lt;li&gt;主线程调用epoll_wait 等待socket可写。&lt;/li&gt;&#xA;&lt;li&gt;当socket可写时，epoll_wait 通知主线程。主线程将socket可写事件放入请求队列。&lt;/li&gt;&#xA;&lt;li&gt;睡眠在请求队列上的某个工作线程被唤醒，它往socket上写入服务器处理客户请求的结果。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/io_actor/reactor.png&#34; alt=&#34;reactor&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;procactor&#34;&gt;Procactor&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;将多有I/O操作都交给主线程和内核来处理, 工作线程仅负责业务逻辑&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Proactor工作流程∶&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主线程调用aio_read 函数向内核注册 socket 上的读完成事件，并告诉内核用户读缓冲区的位置，以及读操作完成时如何通知应用程序（这里以信号为例，详情请参考sigevent的 man 手册）。&lt;/li&gt;&#xA;&lt;li&gt;主线程继续处理其他逻辑。&lt;/li&gt;&#xA;&lt;li&gt;当socket上的数据被读入用户缓冲区后，内核将向应用程序发送一个信号，以通知应用程序数据已经可用。&lt;/li&gt;&#xA;&lt;li&gt;应用程序预先定义好的信号处理函数选择一个工作线程来处理客户请求。工作线程处理完客户请求之后，调用 aio_write 函数向内核注册 socket 上的写完成事件，并告诉内核用户写缓冲区的位置，以及写操作完成时如何通知应用程序（仍然以信号为例）。&lt;/li&gt;&#xA;&lt;li&gt;主线程继续处理其他逻辑。&lt;/li&gt;&#xA;&lt;li&gt;当用户缓冲区的数据被写人 socket 之后，内核将向应用程序发送一个信号，以通知应用程序数据已经发送完毕。&lt;/li&gt;&#xA;&lt;li&gt;应用程序预先定义好的信号处理函数选择一个工作线程来做善后处理，比如决定是否关闭 socket。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://vcvvvc.github.io/img/io_actor/proactor.png&#34; alt=&#34;proactor&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;模拟proactor&#34;&gt;模拟Proactor&lt;/h1&gt;&#xA;&lt;p&gt;使用同步I/O模型（仍然以epoll_wait为例）模拟出的Proactor模式的工作流程∶&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主线程往 epoll 内核事件表中注册 socket 上的读就绪事件。&lt;/li&gt;&#xA;&lt;li&gt;主线程调用 epoll_wait 等待 socket上有数据可读。&lt;/li&gt;&#xA;&lt;li&gt;当 socket 上有数据可读时，epoll_wait通知主线程。主线程从socket循环读取数据，直到没有更多数据可读，然后将读取到的数据封装成一个请求对象并插入请求队列。&lt;/li&gt;&#xA;&lt;li&gt;睡眠在请求队列上的某个工作线程被唤醒，它获得请求对象并处理客户请求，然后往 epoll 内核事件表中注册 socket上的写就绪事件。&lt;/li&gt;&#xA;&lt;li&gt;主线程调用 epoll_wait 等待 socket 可写。&lt;/li&gt;&#xA;&lt;li&gt;当 socket 可写时，epoll wait 通知主线程。主线程往 socket 上写人服务器处理客户请求的结果。&#xA;&lt;img src=&#34;https://vcvvvc.github.io/img/io_actor/syn_proactor.png&#34; alt=&#34;syn_proactor&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;半同步半异步&#34;&gt;半同步/半异步&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;在I/O模型中，&amp;ldquo;同步&amp;quot;和&amp;quot;异步&amp;quot;区分的是内核向应用程序通知的是何种 I/O 事件（是就绪事件还是完成事件），以及该由谁来完成I/O读写（是应用程序还是内核）。在并发模式中，&amp;ldquo;同步&amp;quot;指的是程序完全按照代码序列的顺序执行∶&amp;ldquo;异步&amp;quot;指的是程序的执行需要由系统事件来驱动。常见的系统事件包括中断、信号等。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
