<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Function on VW Blog</title>
    <link>https://vcvvvc.github.io/tags/function/</link>
    <description>Recent content in Function on VW Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 14 Aug 2020 16:16:33 +0800</lastBuildDate>
    <atom:link href="https://vcvvvc.github.io/tags/function/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Constexpr</title>
      <link>https://vcvvvc.github.io/post/constexpr/</link>
      <pubDate>Fri, 14 Aug 2020 16:16:33 +0800</pubDate>
      <guid>https://vcvvvc.github.io/post/constexpr/</guid>
      <description>&lt;h1 id=&#34;0array&#34;&gt;0.Array&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int url[10]; //true&#xA;int url[6 + 4] //true&#xA;&#xA;int len = 10;&#xA;int url[len] //flase&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h1 id=&#34;1constexpr&#34;&gt;1.Constexpr&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;&#xA;using namespace std;&#xA;int main()&#xA;{&#xA;    /*&#xA;     * If have not constexpr, CPP throw error&#xA;     */&#xA;    constexpr int num = 1 + 2 + 3; &#xA;    int url[num] = {1,2,3,4,5,6};&#xA;    couts&amp;lt;&amp;lt; url[1] &amp;lt;&amp;lt; endl;&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h1 id=&#34;2only-have-one-return&#34;&gt;2.Only have one &amp;lsquo;return&amp;rsquo;&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Error&#xA;constexpr int display(int x) {&#xA;    int ret = 1 + 2 + x;&#xA;    return ret;&#xA;}&#xA;&#xA;# True&#xA;constexpr int display(int x) {&#xA;    return 1 + 2 + x;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h1 id=&#34;3must-have-return&#34;&gt;3.Must have &amp;lsquo;return&amp;rsquo;&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Error&#xA;constexpr void display() {&#xA;    ... &#xA;}&#xA;&#xA;# True &#xA;constexpr int display() {&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h1 id=&#34;4must-have-funciion-declaration&#34;&gt;4.Must have funciion declaration&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;&#xA;using namespace std;&#xA;&#xA;int noconst_dis(int x);&#xA;&#xA;// constexpr&#xA;constexpr int display(int x);&#xA;&#xA;constexpr int display(int x){&#xA;    return 1 + 2 + x;&#xA;}&#xA;&#xA;int main()&#xA;{&#xA;    int a[display(3)] = { 1,2,3,4 };&#xA;    cout &amp;lt;&amp;lt; a[2] &amp;lt;&amp;lt; endl;&#xA;    cout &amp;lt;&amp;lt; noconst_dis(3) &amp;lt;&amp;lt; endl;&#xA;    return 0;&#xA;}&#xA;&#xA;int noconst_dis(int x) {&#xA;    return 1 + 2 + x;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h1 id=&#34;5return-must-constant-expession&#34;&gt;5.&amp;lsquo;Return&amp;rsquo; must constant expession&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;&#xA;using namespace std;&#xA;int num = 3;&#xA;constexpr int display(int x){&#xA;    return num + x;&#xA;}&#xA;int main()&#xA;{&#xA;    //display(3) not is constant &#xA;    int a[display(3)] = { 1,2,3,4 };&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h1 id=&#34;6constexpr-struct&#34;&gt;6.Constexpr struct&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Error&#xA;#include &amp;lt;iostream&amp;gt;&#xA;using namespace std;&#xA;&#xA;constexpr struct myType {&#xA;    const char* name;&#xA;    int age;&#xA;};&#xA;int main()&#xA;{&#xA;    constexpr struct myType mt { &amp;#34;zhangsan&amp;#34;, 10 };&#xA;    cout &amp;lt;&amp;lt; mt.name &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; mt.age &amp;lt;&amp;lt; endl;&#xA;    return 0;&#xA;}&#xA;&#xA;# True&#xA;#include &amp;lt;iostream&amp;gt;&#xA;using namespace std;&#xA;&#xA;struct myType {&#xA;    constexpr myType(char *name,int age):name(name),age(age){};&#xA;    const char* name;&#xA;    int age;&#xA;};&#xA;&#xA;int main()&#xA;{&#xA;    constexpr struct myType mt { &amp;#34;zhangsan&amp;#34;, 10 };&#xA;    cout &amp;lt;&amp;lt; mt.name &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; mt.age &amp;lt;&amp;lt; endl;&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h1 id=&#34;7-class&#34;&gt;7. CLass&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;&#xA;using namespace std;&#xA;//自定义类型的定义&#xA;class myType {&#xA;public:&#xA;    constexpr myType(const char *name,int age):name(name),age(age){};&#xA;    constexpr const char * getname(){&#xA;        return name;&#xA;    }&#xA;&#xA;    /*&#xA;     * unsupport virtual function&#xA;     */&#xA;    constexpr int getage(){&#xA;        return age;&#xA;    }&#xA;private:&#xA;    const char* name;&#xA;    int age;&#xA;    //其它结构体成员&#xA;};&#xA;int main()&#xA;{&#xA;    constexpr struct myType mt { &amp;#34;zhangsan&amp;#34;, 10 };&#xA;    constexpr const char * name = mt.getname();&#xA;    constexpr int age = mt.getage();&#xA;    cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; age &amp;lt;&amp;lt; endl;&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h1 id=&#34;8template&#34;&gt;8.Template&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;&#xA;using namespace std;&#xA;&#xA;struct myType {&#xA;    const char* name;&#xA;    int age;&#xA;};&#xA;&#xA;template&amp;lt;typename T&amp;gt;&#xA;constexpr T dispaly(T t){&#xA;    return t;&#xA;}&#xA;int main()&#xA;{&#xA;    struct myType stu{&amp;#34;zhangsan&amp;#34;,10};&#xA;&#xA;    struct myType ret = dispaly(stu);&#xA;    cout &amp;lt;&amp;lt; ret.name &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; ret.age &amp;lt;&amp;lt; endl;&#xA;&#xA;    constexpr int ret1 = dispaly(10);&#xA;    cout &amp;lt;&amp;lt; ret1 &amp;lt;&amp;lt; endl;&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
