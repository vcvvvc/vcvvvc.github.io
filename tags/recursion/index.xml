<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Recursion on VW Blog</title>
    <link>./tags/recursion/</link>
    <description>Recent content in Recursion on VW Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 04 Oct 2020 16:09:26 +0800</lastBuildDate>
    <atom:link href="./tags/recursion/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Algorithm x^n</title>
      <link>./post/recursion/</link>
      <pubDate>Sun, 04 Oct 2020 16:09:26 +0800</pubDate>
      <guid>./post/recursion/</guid>
      <description>&lt;p&gt;&lt;strong&gt;O(1)常数阶 &amp;lt; O(logn)对数阶 &amp;lt; O(n)线性阶 &amp;lt; O(n^2)平方阶 &amp;lt; O(n^3)(立方阶) &amp;lt; O(2^n) (指数阶)&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;for-on&#34;&gt;For O(n)&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int function1(int x, int n) {&#xA;    int result = 1;  // 注意 任何数的0次方等于1&#xA;    for (int i = 0; i &amp;lt; n; i++) {&#xA;        result = result * x;&#xA;    }&#xA;    return result;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h1 id=&#34;recursion-on&#34;&gt;Recursion O(n)&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int function2(int x, int n) {&#xA;    if (n == 0) {&#xA;        return 1; // return 1 同样是因为0次方是等于1的&#xA;    }&#xA;    return function2(x, n - 1) * x;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h1 id=&#34;recursion2-on&#34;&gt;Recursion2 O(n)&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int function3(int x, int n) {&#xA;    if (n == 0) {&#xA;        return 1;&#xA;    }&#xA;    if (n % 2 == 1) {&#xA;        return function3(x, n/2) * function3(x, n/2)*x;&#xA;    }&#xA;    return function3(x, n/2) * function3(x, n/2);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h1 id=&#34;recursion3-ologn&#34;&gt;Recursion3 O(logn)&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int function4(int x, int n) {&#xA;    if (n == 0) {&#xA;        return 1;&#xA;    }&#xA;    int t = function4(x, n/2);// 这里相对于function3，是把这个递归操作抽取出来&#xA;    if (n % 2 == 1) {&#xA;        return t*t*x;&#xA;    }&#xA;    return t*t;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
